#       900865796 –º–æ—è
# —Å–æ–∑–¥–∞—Ç—å pip freeze > requirements.txt
# —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å pip install -r requirements.txt




import sqlite3
import os
import asyncio
import random
import time
import requests

#import update

#from bs4 import BeautifulSoup

from array import *

from datetime import datetime, timedelta

import logging

from aiogram import Bot, Dispatcher, types
from aiogram.types import ChatMember
from aiogram.filters import Command
from aiogram.types import Message


from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiogram.types import CallbackQuery
from aiogram.filters.callback_data import CallbackData


from aiogram.types.input_file import FSInputFile

from aiogram_calendar import SimpleCalendarCallback, SimpleCalendar

from config import *




bot = Bot(token=TOKEN)
dp = Dispatcher()



HISTORY_DIR = "data/history"
logging.basicConfig(level=logging.INFO)

logging.basicConfig(level=logging.INFO, filename='data/variables/log.txt', format='%(asctime)s - %(message)s')

class ADMINS(StatesGroup):
    idtg = State()
    role = State()
    delete = State()
    help = State()
    text = State()
    link = State()
    desc = State()
    minus = State()
    generate = State()

class CHAN(StatesGroup):
    name_chan = State()
    id_chan = State()
    link_chan = State()

class GIVEAWAY(StatesGroup):
    chan_id = State()
    name = State()
    post = State()
    link = State()
    giveaway_end = State()
    date_end = State()
    stop_reason = State()
    name_file = State()
    much_win = State()
    win_numbers = State() 

class manual_send(StatesGroup):
    idtg = State()
    name = State()
    password = State()



# –°–æ–∑–¥–∞–µ–º –ë–î –∞–¥–º–∏–Ω–æ–≤
con = sqlite3.connect('data/db/role/admin.db')
cur = con.cursor()
cur.execute('''
    CREATE TABLE IF NOT EXISTS admins(
            id INTEGER PRIMARY KEY AUTOINCREMENT, 
            idtg VARCHAR (20), 
            name VARCHAR (40), 
            nick VARCHAR (40),
            role VARCHAR (20)
            )''')
cur.execute('''
    CREATE TABLE IF NOT EXISTS login(
            id INTEGER PRIMARY KEY AUTOINCREMENT, 
            login_app VARCHAR (200), 
            password_app VARCHAR (200),
            time_app  VARCHAR (200)
            )''')

con.commit()
cur.close()
con.close()

# –°–æ–∑–¥–∞–µ–º –ë–î –∑–∞–ø–∏—Å–æ–∫
con = sqlite3.connect('data/db/notepad/notepad.db')
cur = con.cursor()
cur.execute('''
    CREATE TABLE IF NOT EXISTS note(
            id INTEGER PRIMARY KEY AUTOINCREMENT, 
            admin_nick VARCHAR (20), 
            link VARCHAR (800), 
            desc VARCHAR (400),
            text VARCHAR (20)
            )''')
con.commit()
cur.close()
con.close()

# –°–æ–∑–¥–∞–µ–º –ë–î –∫–∞–Ω–∞–ª–æ–≤
con = sqlite3.connect('data/db/giveaway/chan_data.db')
cur = con.cursor()
cur.execute('''
    CREATE TABLE IF NOT EXISTS channals(
            id INTEGER PRIMARY KEY AUTOINCREMENT, 
            id_chan VARCHAR (20), 
            name VARCHAR (40), 
            link VARCHAR (40)
            )''')
con.commit()
cur.close()
con.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    try:
        with sqlite3.connect('data/db/giveaway/giveaway.db') as con:
            cur = con.cursor()
            tributes = (cur.execute('SELECT COUNT (*) from tributes').fetchone())[0]

    except:
        pass
    await state.clear()
    user_id = message.from_user.id
    name = message.chat.first_name
    nick = message.from_user.username

    items = get_sorted_items(HISTORY_DIR)
    files = items
    
    MAX_FILES = 12
    if len(files) > MAX_FILES:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ)
        files_to_delete = files[MAX_FILES:]
        for file in files_to_delete:
            try:
                os.remove(file['path'])
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
    
    if is_user_admin(user_id):
        role = role_in_db(user_id)
        board = InlineKeyboardBuilder()
        con = sqlite3.connect('data/db/role/admin.db')
        cur = con.cursor()
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –∏ –Ω–∏–∫ –∞–¥–º–∏–Ω–∞
        cur.execute(f'UPDATE admins SET name = ? wHERE idtg = {user_id} ', [name])
        cur.execute(f'UPDATE admins SET nick = ? wHERE idtg = {user_id}', [nick])
        con.commit()
        con.close()

        if role == 'master':
            board.add(types.InlineKeyboardButton(text="üõ†–ü—Ä–æ–¥–ª–∏—Ç—å WebAppüõ†", callback_data="selenium_update"))
            board.row(types.InlineKeyboardButton(text="–†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –∞–¥–º–∏–Ω–æ–≤", callback_data="start_adminbase"))
        board.row(types.InlineKeyboardButton(text="üéÅ–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–ºüéÅ", callback_data="giveaway"))
        board.row(types.InlineKeyboardButton(text="–ò—Å—Ç–æ—Ä–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π", callback_data="start_history"))
        board.row(types.InlineKeyboardButton(text="–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", callback_data="start_notepad"))
        board.row(types.InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å WebApp", web_app=WebAppInfo(url='https://firestormwebapp.pythonanywhere.com/start')))
        board.row(types.InlineKeyboardButton(text="‚ùóÔ∏èHELP‚ùóÔ∏èSOS‚ùóÔ∏è", callback_data="start_sos"))
        board.adjust(1)
        try:
            with sqlite3.connect('data/db/giveaway/giveaway.db') as con:
                cur = con.cursor()
                number = int((cur.execute('SELECT COUNT (*) from giveaways_data').fetchone())[0])
                giveaway_link = (cur.execute('SELECT chan_link FROM giveaways_data WHERE giveaway_status = ?', ['active']).fetchone())[0]
                giveaway_name = (cur.execute('SELECT chan_name FROM giveaways_data WHERE giveaway_status = ?', ['active']).fetchone())[0]
                giveaway_msg = (cur.execute('SELECT msg_id FROM giveaways_data WHERE giveaway_status = ?', ['active']).fetchone())[0]
                giveaway_end = (cur.execute('SELECT giveaway_end FROM giveaways_data WHERE giveaway_status = ?', ['active']).fetchone())[0]
            link = (f'{giveaway_link}' + '/' + f'{giveaway_msg}')
            current_date = datetime.today()
            date_obj = datetime.strptime(giveaway_end, "%d_%m_%Y")
            delta = (date_obj - current_date).days
            with sqlite3.connect('data/db/role/admin.db') as con:
                cur = con.cursor()
                time_app = (cur.execute('SELECT time_app FROM login').fetchone())[0]
            date_obj = datetime.strptime(time_app, "%Y-%m-%d")
            delta_app = (date_obj - current_date).days
            sent_message = await message.answer (f'üëãüèª <i>–ü—Ä–∏–≤–µ—Ç, {name}!!! üëãüèª\n–†–æ–∑—ã–≥—Ä—ã—à ‚Ññ{number} <b><u>–∞–∫—Ç–∏–≤–µ–Ω</u></b>\n–ü—Ä–æ–≤–æ–¥–∏—Ç—å—Å—è –≤ –∫–∞–Ω–∞–ª–µ <a href="{giveaway_link}">{giveaway_name}</a> \n–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å—Ç –º–æ–∂–Ω–æ —Ç—É—Ç üëâüèª<a href="{link}">–ñ–ú–Ø–ö</a>\n–î–æ –∫–æ–Ω—Ü–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –æ—Å—Ç–∞–ª–æ—Å—å <b><u>{delta}</u></b> –¥–Ω–µ–π\n<b>WebApp –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ –µ—â–µ <u>{delta_app}</u> –¥–Ω–µ–π</b>\n–í—ã–±–∏—Ä–∞–π –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç</i>', parse_mode="HTML", disable_web_page_preview=True, reply_markup=board.as_markup())
            asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))
        except:
            with sqlite3.connect('data/db/role/admin.db') as con:
                cur = con.cursor()
                time_app = (cur.execute('SELECT time_app FROM login').fetchone())[0]
            current_date = datetime.today()
            date_obj = datetime.strptime(time_app, "%Y-%m-%d")
            delta_app = (date_obj - current_date).days
            sent_message = await message.answer (f"üëãüèª <i>–ü—Ä–∏–≤–µ—Ç, {name}!!! üëãüèª\n<b>WebApp –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ –µ—â–µ <u>{delta_app}</u> –¥–Ω–µ–π</b>\n–í—ã–±–∏—Ä–∞–π –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç</i>", parse_mode="HTML", disable_web_page_preview=True, reply_markup=board.as_markup())
            asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))
    
    else:
        # –ï—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–≥–∏
        idtg = message.from_user.id
        with sqlite3.connect('data/db/giveaway/giveaway.db') as con:
            cur = con.cursor()
            exist = cur.execute('SELECT 1 FROM tributes WHERE id_tg = ?', [idtg]).fetchone()
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, —Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        if exist:
            with sqlite3.connect('data/db/giveaway/giveaway.db') as con:
                act = 'active'
                cur = con.cursor()
                giveaway_act = cur.execute('SELECT 1 FROM giveaways_data WHERE giveaway_status = ?', [act]).fetchone()
        
            # –ï—Å–ª–∏ —Ä–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤—ã–∏–≥—Ä—ã—à
            if not giveaway_act:
                try:
                    with sqlite3.connect('data/db/giveaway/winners.db') as con:
                        cur = con.cursor()
                        name = (cur.execute('SELECT us_name FROM winners WHERE id_tg = ?', [idtg]).fetchone())[0]
                        password = (cur.execute('SELECT password FROM winners WHERE id_tg = ?', [idtg]).fetchone())[0]
                        board = InlineKeyboardBuilder()
                        board.add(types.InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Ç–æ–≥ —Ä–æ–∑—ã–≥—Ä—ã—à–∞", web_app=WebAppInfo(url='https://firestormwebapp.pythonanywhere.com/start')))
                        try:
                            await message.answer (f'<i> –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {name}!!! üëãüèª\n–í—ã –ø–æ–±–µ–¥–∏–ª–∏ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –æ—Ç <b><a href="https://firestorm-servers.com/ru">Firestorm</a></b> ü•≥\n–ü–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à–∞\nüëâüèª {password} üëàüèª\n–°–æ–æ–±—â–∏—Ç–µ –µ–≥–æ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–∏—Å–∫–æ—Ä–¥ <u>Aorid</u> –ª–∏–±–æ <u>Retmex</u> –∏ –ø–æ–ª—É—á–∏—Ç–µ —Å–≤–æ–π –ø—Ä–∏–∑ üèÜ !</i>', disable_web_page_preview=True, parse_mode="HTML", reply_markup=board.as_markup())
                        except Exception as e:
                            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—Å–ª–∞—Ç—å –ø–∞—Ä–æ–ª—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—é, –æ—à–∏–±–∫–∞: {e}")
                except:
                    board = InlineKeyboardBuilder()
                    board.add(types.InlineKeyboardButton(text="–ò—Ç–æ–≥ —Ä–æ–∑—ã–≥—Ä—ã—à–∞", web_app=WebAppInfo(url='https://firestormwebapp.pythonanywhere.com/start')))
                    await message.answer (f'<i>üëãüèª –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {name}! üëãüèª\n–†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à–µ–Ω ‚úÖ\n–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ ‚ùå\n–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ</i> üëá', parse_mode="HTML", reply_markup=board.as_markup())

            # –ï—Å–ª–∏ —Ä–æ–∑—ã–≥—Ä—ã—à –ù–ï –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∞–Ω
            else:
                with sqlite3.connect('data/db/giveaway/giveaway.db') as con:
                    cur = con.cursor()
                    giveaway_end = (cur.execute('SELECT giveaway_end FROM giveaways_data WHERE giveaway_status = ?', ['active']).fetchone())[0]
                current_date = datetime.today()
                date_obj = datetime.strptime(giveaway_end, "%d_%m_%Y")
                delta = (date_obj - current_date).days
                try:
                    await message.answer (f'<i> –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {name}! üëãüèª\n–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã üòâ\n–î–æ –∫–æ–Ω—Ü–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –æ—Å—Ç–∞–ª–æ—Å—å {delta} –¥–Ω–µ–π</i> üóìÔ∏è ', parse_mode="HTML")
                except Exception as e:
                    print(f"—Ä–æ–∑—ã–≥—Ä—ã—à –ù–ï –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∞–Ω: {e}")

        # –ï—Å–ª–∏ —Ä–µ–≥–∏ –Ω–µ—Ç 
        else:
            with sqlite3.connect('data/db/giveaway/giveaway.db') as con:
                act = 'active'
                cur = con.cursor()
                giveaway_act = cur.execute('SELECT 1 FROM giveaways_data WHERE giveaway_status = ?', [act]).fetchone()
                giveaway_end = (cur.execute('SELECT giveaway_end FROM giveaways_data WHERE giveaway_status = ?', [act]).fetchone())[0]
            current_date = datetime.today()
            date_obj = datetime.strptime(giveaway_end, "%d_%m_%Y")
            delta = (date_obj - current_date).days
            if not nick:
                nick = "MINUS"
            else:
                nick = "@" + nick
            
            # –ï—Å–ª–∏ —Ä–æ–∑—ã–≥—Ä—ã—à –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω
            if not giveaway_act:
                try:
                    board = InlineKeyboardBuilder()
                    board.add(types.InlineKeyboardButton(text="–ò—Ç–æ–≥ —Ä–æ–∑—ã–≥—Ä—ã—à–∞", web_app=WebAppInfo(url='https://firestormwebapp.pythonanywhere.com/start')))
                    await message.answer (f'<i>üëãüèª –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {name}! üëãüèª\n–†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à–µ–Ω ‚úÖ\n–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ ‚ùå\n–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ</i> üëá', parse_mode="HTML", reply_markup=board.as_markup())
                except Exception as e:
                    print(f"–†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å: {e}")
            
            # –†–æ–∑—ã–≥—Ä—ã—à –∞–∫—Ç–∏–≤–µ–Ω, —Ä–µ–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            else:
                with sqlite3.connect('data/db/giveaway/giveaway.db') as con:
                    act = 'active'
                    cur = con.cursor()
                    chan_id = (cur.execute('SELECT chan_id FROM giveaways_data WHERE giveaway_status = ?', [act]).fetchone())[0]
                try:
                    podpiska = await bot.get_chat_member(chat_id=chan_id, user_id=idtg)
                    podpiska = podpiska.status
                    if podpiska in ["member", "administrator", "creator"]:
                        #–ü–∏–∑–¥–∏–º –∞–≤–∞—Ç–∞—Ä
                        user_id = message.from_user.id
                        user_info = await bot.get_user_profile_photos(user_id, limit=1)
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–≤–∞—Ç–∞—Ä
                        if user_info.photos:
                       # –ü–æ–ª—É—á–∞–µ–º file_id —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∞–≤–∞—Ç–∞—Ä–∞
                            file_id = user_info.photos[0][-1].file_id
                           # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
                            file_info = await bot.get_file(file_id)
                           # –°–∫–∞—á–∏–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä
                            file_url = f"https://api.telegram.org/file/bot{TOKEN}/{file_info.file_path}"
                            response = requests.get(file_url)
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–≤–∞—Ç–∞—Ä –≤ —Ñ–∞–π–ª
                            with open(f"data/variables/scr/avatars/{idtg}.jpg", "wb") as avatar_file:
                                avatar_file.write(response.content)
                           # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                            with open(f"data/variables/scr/avatars/{idtg}.jpg", "rb") as file:
                                file.read()
                            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                            image_path = f'data/variables/scr/avatars/{idtg}.jpg'
                            ava = convert_image_to_binary(image_path)
                        else:
                            with open("data/variables/scr/no_ava.jpg", "rb") as file:
                                file.read()
                            image_path = 'data/variables/scr/no_ava.jpg'
                            ava = convert_image_to_binary(image_path)

                        with sqlite3.connect('data/db/giveaway/giveaway.db') as con:
                            cur = con.cursor()
                            cur.execute('INSERT INTO tributes (id_tg, us_nick, us_name, podpis, us_ava) VALUES (?, ?, ?, ?, ?)', (idtg, nick, name, podpiska, ava))
                        try:
                            await message.answer (f'<i>üëãüèª –ü—Ä–∏–≤–µ—Ç, {name}!!! üëãüèª\n–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞‚úÖ\n–î–æ –∫–æ–Ω—Ü–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –æ—Å—Ç–∞–ª–æ—Å—å {delta} –¥–Ω–µ–π üìÜ</i>', parse_mode="HTML")
#                            os.remove(f'data/variables/scr/avatars/{idtg}.jpg')
                        except Exception as e:
                            print(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞\n–î–æ –∫–æ–Ω—Ü–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –æ—Å—Ç–∞–ª–æ—Å—å: {e}")
                        
                        with sqlite3.connect('data/db/giveaway/giveaway.db') as con:
                            act = 'active'
                            cur = con.cursor()
                            chan_id = int((cur.execute('SELECT chan_id FROM giveaways_data WHERE giveaway_status = ?', [act]).fetchone())[0])
                            msg_id = int((cur.execute('SELECT msg_id FROM giveaways_data WHERE giveaway_status = ?', [act]).fetchone())[0])
                        board = InlineKeyboardBuilder()
                        board.add(types.InlineKeyboardButton(text=f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ({tributes+1})", url='https://t.me/Firestorm_contest_bot'))
                        try:
                            await bot.edit_message_reply_markup(chat_id=chan_id, message_id=msg_id, reply_markup=board.as_markup())
                        except Exception as e:
                            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ —Ä–µ–≥–∏: {e}")

                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ø—ã—Ç–∞–ª—Å—è –∑–∞—Ä–µ–≥–∞—Ç—å—Å—è, –Ω–æ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª
                    else:
                        try:
                            with sqlite3.connect('data/db/giveaway/giveaway.db') as con:
                                act = 'active'
                                cur = con.cursor()
                                chan_link = (cur.execute('SELECT chan_link FROM giveaways_data WHERE giveaway_status = ?', [act]).fetchone())[0]
                                chan_name = (cur.execute('SELECT chan_name FROM giveaways_data WHERE giveaway_status = ?', [act]).fetchone())[0]
                            
                            await message.answer (f'<i> –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {name}! üëãüèª\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª <a href="{chan_link}"> {chan_name}</a>  üòü</i>', parse_mode="HTML")
                        except Exception as e:
                            print(f"–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª 320: {e}")
                except Exception as e:
                    print (f"322 —Å—Ç—Ä–æ–∫–∞ :{e}")
                    with sqlite3.connect('data/db/giveaway/giveaway.db') as con:
                        act = 'active'
                        cur = con.cursor()
                        chan_link = (cur.execute('SELECT chan_link FROM giveaways_data WHERE giveaway_status = ?', [act]).fetchone())[0]
                        chan_name = (cur.execute('SELECT chan_name FROM giveaways_data WHERE giveaway_status = ?', [act]).fetchone())[0]
                    try:
                        await message.answer (f'<i> –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {name}! üëãüèª\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª <a href="{chan_link}"> {chan_name}</a>  üòü</i>', parse_mode="HTML")
                    except Exception as e:
                        print(f"–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª 326: {e}")


# –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∞–≤–∞—Ç–∞—Ä—ã –≤ –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª
def convert_image_to_binary(image_path):
    with open(image_path, 'rb') as file:
        return file.read()


@dp.callback_query(lambda c: c.data == "start_history")
async def process_browser(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await list_directory(callback_query.message, HISTORY_DIR)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
@dp.callback_query(lambda c: c.data.startswith("adminminus_"))
async def adminminus(callback_query: types.CallbackQuery):
    await callback_query.answer()
    admin_id = callback_query.data.split("_", 1)[1]
    try:
        con = sqlite3.connect('data/db/role/admin.db')
        cur = con.cursor()
        cur.execute("DELETE FROM admins WHERE idtg = ?", (admin_id,))
        con.commit()
        con.close()
        con = sqlite3.connect('data/db/role/admin.db')
        cur = con.cursor()
        all = cur.execute("SELECT id FROM admins ORDER BY id DESC LIMIT 1")
        all = int((cur.fetchone())[0])
        board = InlineKeyboardBuilder()
        for i in range(1, all+1):
            try:
                nick = cur.execute(f'SELECT nick FROM admins WHERE id = ?', [i]).fetchone()
                idtg = cur.execute(f'SELECT idtg FROM admins WHERE id = ?', [i]).fetchone()
                nick = nick[0]
                idtg = idtg[0]
                board.add(types.InlineKeyboardButton(text=f"{nick}", callback_data=f"adminminus_{idtg}"))
            except:
                pass
        board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–û—Ç–º–µ–Ω–∞‚Ü©Ô∏è", callback_data="ok"))
        await callback_query.message.edit_text("<i>–ê–¥–º–∏–Ω —É–¥–∞–ª–µ–Ω</i>", parse_mode="HTML", reply_markup=board.as_markup())
    except:
        board = InlineKeyboardBuilder()
        board.row(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
        sent_message = await callback_query.message.edit_text("<i>–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞</i>", parse_mode="HTML", reply_markup=board.as_markup())
        asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —á—Ç–µ–Ω–∏—è –±–∞–∑—ã –≤–∏–Ω–Ω–µ—Ä–æ–≤
@dp.callback_query(lambda c: c.data.startswith("log:"))
async def winners(callback_query: types.CallbackQuery):
    await callback_query.answer()
    file_path = callback_query.data.split(":", 1)[1]
    file_path = f"{HISTORY_DIR}" + "/log " + f"{file_path}"
    with open (file_path, 'r', encoding="utf-8") as file:
        winner_text = file.read()
    items = get_sorted_items(HISTORY_DIR)
    board = InlineKeyboardBuilder()
    files = items
    for file in files:
        button_text = (file['name']).split(" ", 1)[1]
        filename = button_text
        button_text = button_text.split(".", 1)[0]
        board.add(types.InlineKeyboardButton(text=button_text, callback_data=f"log:{filename}"))
    board.adjust(*[3] * len(files), 1)
    board.row(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
    sent_message = await callback_query.message.edit_text(f"{winner_text}\n--------------------\n<i>–ö–æ–≥–¥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏–ª—Å—è —Ä–æ–∑—ã–≥—Ä—ã—à?\n–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è</i>", parse_mode="HTML", reply_markup=board.as_markup())
    asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —á—Ç–µ–Ω–∏—è –∑–∞–ø–∏—Å–Ω–æ–π –∫–Ω–∏–∂–∫–∏
@dp.callback_query(lambda c: c.data.startswith("notepad_"))
async def notepad(callback_query: types.CallbackQuery):
    await callback_query.answer()
    i = callback_query.data.split("_", 1)[1]
    con = sqlite3.connect('data/db/notepad/notepad.db')
    cur = con.cursor()
    nick = (cur.execute('SELECT admin_nick FROM note WHERE id = ?', [i]).fetchone())[0]
    link = (cur.execute('SELECT link FROM note WHERE id = ?', [i]).fetchone())[0]
    desc = (cur.execute('SELECT desc FROM note WHERE id = ?', [i]).fetchone())[0]
    text_base = (cur.execute('SELECT text FROM note WHERE id = ?', [i]).fetchone())[0]
    con.close()
    board = InlineKeyboardBuilder()
    con = sqlite3.connect('data/db/notepad/notepad.db')
    cur = con.cursor()
    try:
        all = cur.execute("SELECT id FROM note ORDER BY id DESC LIMIT 1")
        all = int((cur.fetchone())[0])
        cur.execute("SELECT * FROM note")
        rows = cur.fetchall()
        for i in range (1, all+1):
            try:
                text = cur.execute("SELECT text FROM note WHERE id = ?", (i,)).fetchone()
                text = text[0]
                board.add(types.InlineKeyboardButton(text=f"{text}", callback_data=f"notepad_{i}"))
            except:
                pass
    except:
        pass
    con.close()
    board.add(types.InlineKeyboardButton(text="‚ûï–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å‚ûï", callback_data="note_plus"))
    board.add(types.InlineKeyboardButton(text="‚ûñ–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å‚ûñ", callback_data="note_minus"))
    board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–û—Ç–º–µ–Ω–∞‚Ü©Ô∏è", callback_data="ok"))
    board.adjust(*[1] * len(rows), 2, 1)
    sent_message = await callback_query.message.edit_text(f"<i>{text_base}\n{link}\n{desc}\n –î–æ–±–∞–≤–∏–ª <b>@{nick}</b></i>", parse_mode="HTML", disable_web_page_preview=True, reply_markup=board.as_markup())
    asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))

@dp.callback_query(lambda c: c.data.startswith("chan_minus:"))
async def chan_minus (callback_query: types.CallbackQuery):
    await callback_query.answer()
    i = callback_query.data.split(":", 1)[1]
    con = sqlite3.connect('data/db/giveaway/chan_data.db')
    cur = con.cursor()
    cur.execute("DELETE FROM channals WHERE id = ?", (i,))    
    con.commit()
    con.close()
    con = sqlite3.connect('data/db/giveaway/chan_data.db')
    cur = con.cursor()
    cur.execute("SELECT * FROM channals")
    rows = cur.fetchall()
    con.close()
    board = InlineKeyboardBuilder()
    try:
        for row in rows:
            board.add(types.InlineKeyboardButton(text=f"{row[2]}", callback_data=f"giveaway:{row[0]}"))
        board.add(types.InlineKeyboardButton(text="‚ûï–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª‚ûï", callback_data="channal_plus"))
        board.add(types.InlineKeyboardButton(text="‚ûñ–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª‚ûñ", callback_data="channal_minus"))
        board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
        board.adjust(*[1] * len(rows), 2, 1)
        sent_message = await callback_query.message.edit_text(f"<i>–í—ã–±–∏—Ä–∞–π –∫–∞–Ω–∞–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞</i>", parse_mode="HTML", reply_markup=board.as_markup())
        asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))
    except:
        board.add(types.InlineKeyboardButton(text="‚ûï–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª‚ûï", callback_data="channal_plus"))
        board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
        board.adjust(1)
        sent_message = await callback_query.message.edit_text(f"<i>–í—Å–µ –∫–∞–Ω–∞–ª—ã —É–¥–∞–ª–µ–Ω—ã</i>", parse_mode="HTML", reply_markup=board.as_markup())
        asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))

# –°—Ç–∞—Ä—Ç —Ä–æ–∑—ã–≥—Ä—ã—à–∞ (—Å–æ–∑–¥–∞–Ω–∏–µ –ë–î)
@dp.callback_query(lambda c: c.data.startswith("start_giveaway:"))
async def start_giveaway(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    with sqlite3.connect('data/db/giveaway/giveaway.db') as con:
        cur = con.cursor()
        
        cur.execute('''
            CREATE TABLE IF NOT EXISTS giveaways_data(
                    id INTEGER PRIMARY KEY AUTOINCREMENT, 
                    admin_start VARCHAR (20),
                    chan_name VARCHAR (30),
                    admin_end VARCHAR (20),
                    chan_id VARCHAR (20), 
                    chan_link VARCHAR (120),
                    msg_id VARCHAR (20),
                    giveaway_status VARCHAR (20),
                    giveaway_end VARCHAR (20),
                    giveaway_much_win VARCHAR (20)
                    )''')
        
        cur.execute('''
            CREATE TABLE IF NOT EXISTS tributes(
                    id INTEGER PRIMARY KEY AUTOINCREMENT, 
                    id_tg VARCHAR (20),
                    us_nick VARCHAR (20),
                    us_name VARCHAR (20),
                    podpis VARCHAR (20),
                    us_ava BLOB
                    )''')   
        
        cur.execute('''
            CREATE TABLE IF NOT EXISTS loser(
                    id INTEGER PRIMARY KEY AUTOINCREMENT, 
                    id_tg VARCHAR (20),
                    us_name VARCHAR (20),
                    reason VARCHAR (20)
                    )''') 
        
        cur.execute('''
            CREATE TABLE IF NOT EXISTS winners(
                    id INTEGER PRIMARY KEY AUTOINCREMENT, 
                    id_tg VARCHAR (20),
                    us_nick VARCHAR (20),
                    us_name VARCHAR (20),
                    password VARCHAR (30),
                    us_ava BLOB
                    )''')
        
        con.commit()

    i = callback_query.data.split(":", 1)[1]
    con = sqlite3.connect('data/db/giveaway/chan_data.db')
    cur = con.cursor()
    text = (cur.execute("SELECT name FROM channals WHERE id_chan = ?", (i,)).fetchone())[0]
    link_chan = (cur.execute("SELECT link FROM channals WHERE id_chan = ?", (i,)).fetchone())[0]
    con.close()
    await state.set_state(GIVEAWAY.chan_id)
    await state.update_data(chan_id=i)
    await state.set_state(GIVEAWAY.link)
    await state.update_data(link=link_chan)
    await state.set_state(GIVEAWAY.name)
    await state.update_data(name=text)
    sent_message = await callback_query.message.edit_text(f'<i>–¢–µ–∞—Ç—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –≤–µ—à–∞–ª–∫–∏, –∞ –∫–æ–Ω–∫—É—Ä—Å - —Å –∞–Ω–æ–Ω—Å–∞\n–¢—ã —Ä–µ—à–∏–ª –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω–∫—É—Ä—Å –≤ –∫–∞–Ω–∞–ª–µ <a href="{link_chan}">{text}</a>\n–î–ª—è —ç—Ç–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—É–¥–µ—Ç –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É <b>–æ–∫–æ–Ω—á–∞–Ω–∏—è</b> —Ä–æ–∑—ã–≥—Ä—ã—à–∞, –∞ –∑–∞—Ç–µ–º –º–Ω–µ –Ω—É–∂–µ–Ω –±—É–¥–µ—Ç –ø–æ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–º —Ç—ã –∑–∞–ø—É—Å—Ç–∏—à—å –∫–æ–Ω–∫—É—Ä—Å\n\n<b>–í–´–ë–ò–†–ê–ô –î–ê–¢–£</b></i>', parse_mode="HTML", disable_web_page_preview=True, reply_markup=await SimpleCalendar().start_calendar())
    asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))


@dp.callback_query(SimpleCalendarCallback.filter())
async def process_simple_calendar(callback_query: types.CallbackQuery, callback_data: dict, state: FSMContext):
    selected, date = await SimpleCalendar().process_selection(callback_query, callback_data)
    if selected:
        giveaway_end = date.strftime("%d_%m_%Y")
        await state.set_state(GIVEAWAY.date_end)
        await state.update_data(date_end=giveaway_end)
        await state.set_state(GIVEAWAY.post)
        await callback_query.message.edit_text(f'<i>–§–∏–∫—Å–∏—Ä—É—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è: <u>{date.strftime("%d.%m.%Y")}</u>\n–¢–µ–ø–µ—Ä—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å –ø–æ—Å—Ç–æ–º.\n<b>–ñ–¥—É —Å–µ–π—á–∞—Å</b> –æ—Ç —Ç–µ–±—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º <b><u>(–æ–¥–Ω–∏–º –ø–æ—Å—Ç–æ–º, –∂–¥—É 10 –º–∏–Ω—É—Ç)</u></b>\n</i>', parse_mode="HTML")



# –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@dp.callback_query()
async def process_callback(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    role = role_in_db(user_id)
    callback_data = callback_query.data
    name = callback_query.from_user.username
    nick = name
    logging.info(f"–Æ–∑–µ—Ä {nick} –∑–∞–ø—Ä–æ—Å: {callback_data}")
    data = callback_query.data
    await callback_query.answer()

    if data == "ok":
        await state.clear()
        name = callback_query.from_user.first_name
        items = get_sorted_items(HISTORY_DIR)
        files = items
        MAX_FILES = 12
        if len(files) > MAX_FILES:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ)
            files_to_delete = files[MAX_FILES:]
            for file in files_to_delete:
                try:
                    os.remove(file['path'])
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")

        board = InlineKeyboardBuilder()
        if role  == 'master':
            board.add(types.InlineKeyboardButton(text="üõ†–ü—Ä–æ–¥–ª–∏—Ç—å WebAppüõ†", callback_data="selenium_update"))
            board.add(types.InlineKeyboardButton(text="–†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –∞–¥–º–∏–Ω–æ–≤", callback_data="start_adminbase"))
        board.add(types.InlineKeyboardButton(text="üéÅ–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–ºüéÅ", callback_data="giveaway"))
        board.add(types.InlineKeyboardButton(text="–ò—Å—Ç–æ—Ä–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π", callback_data="start_history"))
        board.add(types.InlineKeyboardButton(text="–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", callback_data="start_notepad"))
        board.row(types.InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å WebApp", web_app=WebAppInfo(url='https://firestormwebapp.pythonanywhere.com/start')))
        board.add(types.InlineKeyboardButton(text="‚ùóÔ∏èHELP‚ùóÔ∏èSOS‚ùóÔ∏è", callback_data="start_sos"))
        board.adjust(1)
        try:
            with sqlite3.connect('data/db/giveaway/giveaway.db') as con:
                cur = con.cursor()
                number = int((cur.execute('SELECT COUNT (*) from giveaways_data').fetchone())[0])
                giveaway_link = (cur.execute('SELECT chan_link FROM giveaways_data WHERE giveaway_status = ?', ['active']).fetchone())[0]
                giveaway_name = (cur.execute('SELECT chan_name FROM giveaways_data WHERE giveaway_status = ?', ['active']).fetchone())[0]
                giveaway_msg = (cur.execute('SELECT msg_id FROM giveaways_data WHERE giveaway_status = ?', ['active']).fetchone())[0]
                giveaway_end = (cur.execute('SELECT giveaway_end FROM giveaways_data WHERE giveaway_status = ?', ['active']).fetchone())[0]
            link = (f'{giveaway_link}' + '/' + f'{giveaway_msg}')
            current_date = datetime.today()
            date_obj = datetime.strptime(giveaway_end, "%d_%m_%Y")
            delta = (date_obj - current_date).days
            with sqlite3.connect('data/db/role/admin.db') as con:
                cur = con.cursor()
                time_app = (cur.execute('SELECT time_app FROM login').fetchone())[0]
            date_obj = datetime.strptime(time_app, "%Y-%m-%d")
            delta_app = (date_obj - current_date).days
            sent_message = await callback_query.message.edit_text (f'üëãüèª <i>–ü—Ä–∏–≤–µ—Ç, {name}!!! üëãüèª\n–†–æ–∑—ã–≥—Ä—ã—à ‚Ññ{number} <b><u>–∞–∫—Ç–∏–≤–µ–Ω</u></b>\n–ü—Ä–æ–≤–æ–¥–∏—Ç—å—Å—è –≤ –∫–∞–Ω–∞–ª–µ <a href="{giveaway_link}">{giveaway_name}</a> \n–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å—Ç –º–æ–∂–Ω–æ —Ç—É—Ç üëâüèª<a href="{link}">–ñ–ú–Ø–ö</a>\n–î–æ –∫–æ–Ω—Ü–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –æ—Å—Ç–∞–ª–æ—Å—å <b><u>{delta}</u></b> –¥–Ω–µ–π\n<b>WebApp –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ –µ—â–µ <u>{delta_app}</u> –¥–Ω–µ–π</b>\n–í—ã–±–∏—Ä–∞–π –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç</i>', parse_mode="HTML", disable_web_page_preview=True, reply_markup=board.as_markup())
            asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))
        except:
            with sqlite3.connect('data/db/role/admin.db') as con:
                cur = con.cursor()
                time_app = (cur.execute('SELECT time_app FROM login').fetchone())[0]
            current_date = datetime.today()
            date_obj = datetime.strptime(time_app, "%Y-%m-%d")
            delta_app = (date_obj - current_date).days
            sent_message = await callback_query.message.edit_text (f"üëãüèª <i>–ü—Ä–∏–≤–µ—Ç, {name}!!! üëãüèª\n<b>WebApp –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ –µ—â–µ <u>{delta_app}</u> –¥–Ω–µ–π</b>\n–í—ã–±–∏—Ä–∞–π –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç</i>", parse_mode="HTML", disable_web_page_preview=True, reply_markup=board.as_markup())
            asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))
    

    elif data == "selenium_update":
        async for result in update.update_webapp():
            await bot.send_message(callback_query.from_user.id, result)
        board = InlineKeyboardBuilder()
        board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
        sent_message = await callback_query.message.edit_text("–í –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏", parse_mode="HTML", reply_markup=board.as_markup())
        asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))
        #async for result in marsh.check_marshrut():
        #    await bot.send_message(callback_query.from_user.id, result)


    elif data == "start_adminbase":
        con = sqlite3.connect('data/db/role/admin.db')
        cur = con.cursor()
        cur.execute("SELECT * FROM admins")
        rows = cur.fetchall()
        con.close()
        response = "<i>–ê–¥–º–∏–Ω—ã –±–æ—Ç–∞:</i>\n\n"
        for row in rows:
            response += f"{row[0]}) –ò–º—è {row[2]} –ù–∏–∫ @{row[3]}\n"
        board = InlineKeyboardBuilder()
        board.add(types.InlineKeyboardButton(text="‚ûï–î–æ–±–∞–≤–∏—Ç—å‚ûï", callback_data="start_adminbase_plus"))
        board.add(types.InlineKeyboardButton(text="‚ûñ–£–±—Ä–∞—Ç—å‚ûñ", callback_data="start_adminbase_minus"))
        board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
        board.adjust(2, 1)
        sent_message = await callback_query.message.edit_text(response, parse_mode="HTML", reply_markup=board.as_markup())
        asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))


    elif data == "start_adminbase_plus":
        await state.set_state(ADMINS.idtg)
        board = InlineKeyboardBuilder()
        board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
        await callback_query.message.edit_text("<i>–í–≤–æ–¥–∏ ID —Ç–µ–ª–µ–≥—Ä–∞–º–∞ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞\n–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª, –∂–º–∏ –∫–Ω–æ–ø–∫—É –≤—ã—à–µ</i>", parse_mode="HTML", reply_markup=board.as_markup())


    elif data == "role_admin":
        await state.update_data(role="admin")
        user_data = await state.get_data()
        idtg = user_data['idtg']
        role = user_data['role']
        await state.clear()
        con = sqlite3.connect('data/db/role/admin.db')
        cur = con.cursor()
        cur.execute(f'INSERT INTO admins (idtg, role) VALUES ("{idtg}", "{role}")')
        con.commit()
        con.close()
        board = InlineKeyboardBuilder()
        board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
        sent_message = await callback_query.message.edit_text("<i>–ó–∞–ø–∏—Å–∞–ª, –ø—É—Å—Ç—å –Ω–æ–≤—ã–π –∞–¥–º–∏–Ω –Ω–∞–ø–∏—à–µ—Ç /start</i>", parse_mode="HTML", reply_markup=board.as_markup())
        asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))


    elif data == "role_master":
        await state.update_data(role="master")
        user_data = await state.get_data()
        idtg = user_data['idtg']
        role = user_data['role']
        await state.clear()
        con = sqlite3.connect('data/db/role/admin.db')
        cur = con.cursor()
        cur.execute(f'INSERT INTO admins (idtg, role) VALUES ("{idtg}", "{role}")')
        con.commit()
        con.close()
        board = InlineKeyboardBuilder()
        board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
        sent_message = await callback_query.message.edit_text("<i>–ó–∞–ø–∏—Å–∞–ª, –ø—É—Å—Ç—å –Ω–æ–≤—ã–π –∞–¥–º–∏–Ω –Ω–∞–ø–∏—à–µ—Ç /start</i>", parse_mode="HTML", reply_markup=board.as_markup())
        asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))


    elif data == "start_adminbase_minus":
        con = sqlite3.connect('data/db/role/admin.db')
        cur = con.cursor()
        all = cur.execute("SELECT id FROM admins ORDER BY id DESC LIMIT 1")
        all = int((cur.fetchone())[0])
        board = InlineKeyboardBuilder()
        for i in range(1, all+1):
            try:
                nick = cur.execute(f'SELECT nick FROM admins WHERE id = ?', [i]).fetchone()
                idtg = cur.execute(f'SELECT idtg FROM admins WHERE id = ?', [i]).fetchone()
                nick = nick[0]
                idtg = idtg[0]
                board.add(types.InlineKeyboardButton(text=f"{nick}", callback_data=f"adminminus_{idtg}"))
            except:
                pass
        con.close()
        board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–û—Ç–º–µ–Ω–∞‚Ü©Ô∏è", callback_data="ok"))
        board.adjust(1)
        sent_message = await callback_query.message.edit_text("<i>–í—ã–±–µ—Ä–∏ –∞–¥–º–∏–Ω–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞–¥–æ –º–∏–Ω—É—Å–∞–Ω—É—Ç—å\n–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª, –∂–º–∏ –æ—Ç–º–µ–Ω—É</i>", parse_mode="HTML", reply_markup=board.as_markup())
        asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))


    elif data == "start_sos":
        await state.set_state(ADMINS.help)
        board = InlineKeyboardBuilder()
        board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–û—Ç–º–µ–Ω–∞‚Ü©Ô∏è", callback_data="ok"))
        sent_message = await callback_query.message.edit_text("<i>–¢–∏—Ö–æ! –ë–µ–∑ –ø–∞–Ω–∏–∫–∏!\n–í —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –æ–ø–∏—à–∏ –≤ —á–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—Å—è.\n–ù—É –ª–∏–±–æ –∂–º–∏ –æ—Ç–º–µ–Ω—É, –µ—Å–ª–∏ —Å—Ç–µ—Å–Ω—è—à–∫–∞</i>", parse_mode="HTML", reply_markup=board.as_markup())
        asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))


    elif data == "start_notepad":
        con = sqlite3.connect('data/db/notepad/notepad.db')
        cur = con.cursor()
        board = InlineKeyboardBuilder()
        try:
            all = cur.execute("SELECT id FROM note ORDER BY id DESC LIMIT 1")
            all = int((cur.fetchone())[0])
            cur.execute("SELECT * FROM note")
            rows = cur.fetchall()
            for i in range (1, all+1):
                try:
                    text = cur.execute("SELECT text FROM note WHERE id = ?", (i,)).fetchone()
                    text = text[0]
                    board.add(types.InlineKeyboardButton(text=f"{text}", callback_data=f"notepad_{i}"))
                except:
                    pass
            con.close()
        except:
            pass
        con.close()
        board.add(types.InlineKeyboardButton(text="‚ûï–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å‚ûï", callback_data="note_plus"))
        board.add(types.InlineKeyboardButton(text="‚ûñ–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å‚ûñ", callback_data="note_minus"))
        board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–û—Ç–º–µ–Ω–∞‚Ü©Ô∏è", callback_data="ok"))
        board.adjust(*[1] * len(rows), 2, 1)
        sent_message = await callback_query.message.edit_text("<i><b>Firestorm</b> –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –≤—Å–µ–≥–¥–∞.\n–ü–æ—ç—Ç–æ–º—É –Ω–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ—Ç–æ–º–∫–æ–≤.\n–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω</i>", parse_mode="HTML", reply_markup=board.as_markup())
        asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))


    elif data == 'note_plus':
        await state.set_state(ADMINS.text)
        board = InlineKeyboardBuilder()
        board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
        sent_message = await callback_query.message.edit_text("<i>–û–∫–µ–π, —Ç—ã –∑–∞—Ö–æ—Ç–µ–ª –æ—Å—Ç–∞–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ—Ç–æ–º–∫–æ–≤.\n–ë—É–¥–µ–º –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç—Ç–∞–ø–æ–≤:\n1) –î–ª—è –Ω–∞—á–∞–ª–∞ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (–æ–¥–Ω–æ - –¥–≤–∞ —Å–ª–æ–≤–∞)\n2) –ó–∞—Ç–µ–º –º–Ω–µ –Ω–∞–¥–æ –±—É–¥–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç\n3) –î–∞–ª–µ–µ —è –ø–æ–ø—Ä–æ—à—É –≤–≤–µ—Å—Ç–∏ –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –≤ —Å–∏–º–≤–æ–ª–∞—Ö –Ω–µ—Ç)\n\n–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª - –∂–º–∏ –æ—Ç–º–µ–Ω—É\n–ï—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥—É–º–∞–ª - –≤–≤–æ–¥–∏ <b>–∫—Ä–∞—Ç–∫–æ–µ</b> –æ–ø–∏—Å–∞–Ω–∏–µ</i>", parse_mode="HTML", reply_markup=board.as_markup())
        asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))


    elif data == "note_minus":
        await state.set_state(ADMINS.minus)
        con = sqlite3.connect('data/db/notepad/notepad.db')
        cur = con.cursor()
        cur.execute("SELECT * FROM note")
        rows = cur.fetchall()
        con.close()
        result = "<i>–ó–∞–ø–∏—Å–∏ –ø–æ –Ω–æ–º–µ—Ä–∞–º:</i>\n\n"
        for row in rows:
            result += f"<u>{row[0]}) {row[4]}</u>\n"
        board = InlineKeyboardBuilder()
        board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
        sent_message = await callback_query.message.edit_text(f"{result}<i><b>\n–í–≤–æ–¥–∏ –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—É—é –Ω–∞–¥–æ —É–¥–∞–ª–∏—Ç—å. –õ–∏–±–æ –∂–º–∏ –æ—Ç–º–µ–Ω–∞</b></i>", parse_mode="HTML", reply_markup=board.as_markup())
        asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))


    elif data == "giveaway":
        board = InlineKeyboardBuilder()
        with sqlite3.connect('data/db/giveaway/giveaway.db') as con:
            cur = con.cursor()
            act = "active"
            try:
                exsist = (cur.execute('SELECT giveaway_end FROM giveaways_data WHERE giveaway_status = ?', [act]).fetchone())[0]
            except:
                exsist = None
        if exsist:
            board.add(types.InlineKeyboardButton(text="üèÅ–ó–∞–≤–µ—Ä—à–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—àüèÅ",  callback_data="giveaway_end"))
        else:
            board.add(types.InlineKeyboardButton(text="‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç –Ω–æ–≤–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞", callback_data="giveaway_start"))
        board.add(types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏",  callback_data="giveaway_stop"))
        board.add(types.InlineKeyboardButton(text="üÜò–†—É—á–Ω–æ–π —Ä–µ–∂–∏–ºüÜò",  callback_data="giveaway_sos"))
        board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
        board.adjust(1)
        sent_message = await callback_query.message.edit_text("<i>–í—ã–±–∏—Ä–∞–π –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç</i>", parse_mode="HTML", reply_markup=board.as_markup())
        asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))


    elif data == "giveaway_sos":
        board = InlineKeyboardBuilder()
        board.add(types.InlineKeyboardButton(text="–°—Ä–∞–Ω–¥–æ–º–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π", callback_data="giveaway_random"))
        board.add(types.InlineKeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—Ä–µ–≥–∞–Ω—ã—Ö", callback_data="giveaway_sos_look"))
        board.add(types.InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞",  callback_data="giveaway_sos_send"))
        board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
        board.adjust(1)
        sent_message = await callback_query.message.edit_text("<i>–í—ã–±–∏—Ä–∞–π –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç</i>", parse_mode="HTML", reply_markup=board.as_markup())
        asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))


    elif data == "giveaway_end":
        board = InlineKeyboardBuilder()
        board.add(types.InlineKeyboardButton(text="‚ùå–ù–µ—Ç, —è —Å–ª—É—á–∞–π–Ω–æ‚ùå", callback_data="ok"))
        await state.set_state(GIVEAWAY.much_win)
        sent_message = await callback_query.message.edit_text("<i>–ü–æ—Ä–∞ –ø–æ–¥–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞?\nü§î –ú–Ω–µ –Ω–∞–¥–æ –∑–Ω–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π.\n <b>–ñ–¥—É —á–∏—Å–ª–æ...</b></i>", parse_mode="HTML", reply_markup=board.as_markup())
        asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))


    elif data == "giveaway_sos_send":
        board = InlineKeyboardBuilder()
        board.add(types.InlineKeyboardButton(text="–£ –º–µ–Ω—è –µ—Å—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ", callback_data="giveaway_manual_send"))
        board.add(types.InlineKeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—Ä–µ–≥–∞–Ω—ã—Ö", callback_data="giveaway_sos_look"))
        board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
        board.adjust(1)
        sent_message = await callback_query.message.edit_text("<i>–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞ –º–Ω–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n<b>idtg</b>\n<b>Name</b>\n<b>Password</b>\n–≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏, –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–≤ –∑–∞—Ä–µ–≥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∞ –ø–∞—Ä–æ–ª—å –ø—Ä–∏–¥–µ—Ç—Å—è —Å—Ä–∞–Ω–¥–æ–º–∏—Ç—å</i>", parse_mode="HTML", reply_markup=board.as_markup())
        asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))


    elif data == "giveaway_manual_send":
        await state.set_state(manual_send.idtg)
        board = InlineKeyboardBuilder()
        board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
        sent_message = await callback_query.message.edit_text("<i>–ñ–¥—É –≤–≤–æ–¥–∞ <b>IDTG</b></i>", parse_mode="HTML", reply_markup=board.as_markup())
        asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))


    elif data == "manual_send_go":
        manual_data = await state.get_data()
        idtg = manual_data['idtg']
        await state.clear()
        with open(f'data/variables/text/manual_send.txt', "r", encoding="utf-8") as file:
            text = file.read()
        try:
            await bot.send_message(chat_id = idtg, text = text, parse_mode="HTML", disable_web_page_preview=True)
            board = InlineKeyboardBuilder()
            board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
            sent_message = await callback_query.message.edit_text("<i>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</i>", parse_mode="HTML", reply_markup=board.as_markup())
            asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))
        except Exception as e:
            board = InlineKeyboardBuilder()
            board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
            sent_message = await callback_query.message.edit_text(f"<i>–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:</i>\n{e}", parse_mode="HTML", reply_markup=board.as_markup())
            asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))


    elif data == "giveaway_sos_look":
        try:
            text = "–ó–∞—Ä–µ–≥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
            with open('data/db/giveaway/giveaway_tributes.txt', "w", encoding="utf-8") as file:
                file.write(text)
            with sqlite3.connect('data/db/giveaway/giveaway.db') as con:
                cur = con.cursor()
                cur.execute("SELECT id, id_tg, us_nick, us_name FROM tributes")
                rows = cur.fetchall()
            for row in rows:
                with open('data/db/giveaway/giveaway_tributes.txt', "a", encoding="utf-8") as file:
                    text = f'IDTG {row[1]}    NICK {row[2]}    NAME {row[3]}\n'
                    file.write(text)
            with open('data/db/giveaway/giveaway_tributes.txt', "r", encoding="utf-8") as file:
                text = file.read()
            max_length: int = 4096
            lines = text.split("\n")  # –†–∞–∑–¥–µ–ª—è–µ–º —Ñ–∞–π–ª –Ω–∞ —Å—Ç—Ä–æ–∫–∏
            current_message = ""
            for line in lines:
                # –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏–º–∏—Ç
                if len(current_message) + len(line) + 1 <= max_length:  # +1 —É—á–∏—Ç—ã–≤–∞–µ—Ç —Å–∏–º–≤–æ–ª '\n'
                    current_message += line + "\n"
                else:
                    # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
                    if current_message.strip():
                        try:
                            sent_message = await callback_query.message.answer(current_message.strip(), parse_mode="HTML")
                            asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))
                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
                    current_message = line + "\n"  # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if current_message.strip():
                sent_message = await callback_query.message.answer(current_message.strip(), parse_mode="HTML")
                asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))
            board = InlineKeyboardBuilder()
            board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
            sent_message = await callback_query.message.answer("–í–æ—Ç –≤—Å–µ –∑–∞—Ä–µ–≥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É", parse_mode="HTML", reply_markup=board.as_markup())
            asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))
        except Exception as e:
            board = InlineKeyboardBuilder()
            board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
            sent_message = await callback_query.message.edit_text(f"<i>–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: {e}\n--------------\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑, –ª–∏–±–æ –ø–∏—à–∏ –≤ SOS</i>", parse_mode="HTML", reply_markup=board.as_markup())
            asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))


    elif data == "giveaway_start":
        try:
            with sqlite3.connect('data/db/giveaway/giveaway.db') as con:
                cur = con.cursor()
                exist = (cur.execute('SELECT chan_link FROM giveaways_data WHERE giveaway_status = ?', ["active"]).fetchone())[0]
            board = InlineKeyboardBuilder()
            board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
            sent_message = await callback_query.message.edit_text(f'<i>–ù–∞—Ä–∫–æ–º–∞–Ω —á—Ç–æ–ª–µ!\n–£–∂–µ –µ—Å—Ç—å –ê–ö–¢–ò–í–ù–´–ô –†–û–ó–´–ì–†–´–® –≤ <a href="{exist}">–∫–∞–Ω–∞–ª–µ</a>!</i>', parse_mode="HTML", reply_markup=board.as_markup())
            asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))
        except:
            try:
                with sqlite3.connect('data/db/giveaway/giveaway.db') as con:
                    cur = con.cursor()
                    cur.execute("DROP TABLE IF EXISTS loser")
                    cur.execute("DROP TABLE IF EXISTS tributes")
                    cur.execute("DROP TABLE IF EXISTS winners")
                    con.commit()
            except Exception as e:
                await callback_query.message.answer(f"<i>–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—É—é –±–∞–∑—É —Ä–æ–∑—ã–≥—Ä—ã—à–∞\n–û—à–∏–±–∫–∞ {e}</i>", parse_mode="HTML")
            try:
            # –£–¥–∞–ª–µ–Ω–∏–µ –±–∞–∑—ã –≤–∏–Ω–µ—Ä–æ–≤
                with sqlite3.connect('data/db/giveaway/winners.db') as con:
                    cur = con.cursor()
                    cur.execute("DROP TABLE IF EXISTS winners")
                    con.commit()
            except Exception as e:
                await callback_query.message.answer(f"<i>–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—É—é –±–∞–∑—É –≤–∏–Ω–µ—Ä–æ–≤\n–û—à–∏–±–∫–∞ {e}</i>", parse_mode="HTML")
            

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
            response = requests.get(
                'https://www.pythonanywhere.com/api/v0/user/{username}/webapps/'.format(
                username=username_app
                ),
                headers={'Authorization': 'Token {token}'.format(token=token_app)}
            )
            if response.status_code == 200:
                soup = BeautifulSoup(response.text, 'lxml').text
                data = response.json()
                expiry_date = data[0]['expiry']
                time_web = datetime.strptime(f"{expiry_date}", "%Y-%m-%d").date()
                time_now = (datetime.today()).date()
                exp = (time_web - time_now).days

                with sqlite3.connect('data/db/role/admin.db') as con:
                    cur = con.cursor()
                    cur.execute('UPDATE login SET time_app = ?', [time_web])

    # –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞—Å–∫–∞            
    #            response = requests.get(
    #                'https://www.pythonanywhere.com/api/v0/user/{username}/schedule/'.format(
    #                username=username_app
    #                ),
    #                headers={'Authorization': 'Token {token}'.format(token=token_app)}
    #            )
    #            soup = BeautifulSoup(response.text, 'lxml').text
    #            data = response.json()
    #            expiry_date = data[0]['expiry']
    #            time_web = datetime.strptime(f"{expiry_date}", "%Y-%m-%d").date()
    #            time_now = datetime.today()
    #            task_expiry = (time_web - time_now).days
            else:
                exp = '–Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å'

            con = sqlite3.connect('data/db/giveaway/chan_data.db')
            cur = con.cursor()
            cur.execute("SELECT * FROM channals")
            rows = cur.fetchall()
            con.close()
            board = InlineKeyboardBuilder()
            try:
                for row in rows:
                    board.add(types.InlineKeyboardButton(text=f"{row[2]}", callback_data=f"start_giveaway:{row[1]}"))
                board.add(types.InlineKeyboardButton(text="‚ûï–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª‚ûï", callback_data="channal_plus"))
                board.add(types.InlineKeyboardButton(text="‚ûñ–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª‚ûñ", callback_data="channal_minus"))
                board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
                board.adjust(*[1] * len(rows), 2, 1)
                sent_message = await callback_query.message.edit_text(f"<i><b>WebApp –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ –µ—â–µ <u>{exp}</u> –¥–Ω–µ–π</b>\n–í—ã–±–∏—Ä–∞–π –∫–∞–Ω–∞–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞</i>", parse_mode="HTML", reply_markup=board.as_markup())
                asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))
            except:
                board.add(types.InlineKeyboardButton(text="‚ûï–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª‚ûï", callback_data="channal_plus"))
                board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
                board.adjust(*[1] * len(rows), 1, 1)
                sent_message = await callback_query.message.edit_text(f"<i>–í—ã–±–∏—Ä–∞–π –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç</i>", parse_mode="HTML", reply_markup=board.as_markup())
                asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))


    elif data == "giveaway_stop":
        board = InlineKeyboardBuilder()
        board.add(types.InlineKeyboardButton(text="‚úÖ–î–∞", callback_data="giveaway_stop_choise"))
        board.add(types.InlineKeyboardButton(text="‚ùå–ù–µ—Ç", callback_data="ok"))
        board.adjust(2)
        sent_message = await callback_query.message.edit_text("<i>–¢—ã –≤—ã–±—Ä–∞–ª <b>–û–¢–ú–ï–ù–ò–¢–¨</b> –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à –ø–æ –∫–∞–∫–∏–º —Ç–æ –ø—Ä–∏—á–∏–Ω–∞–º.\n<b>–î–ê–ù–ù–ê–Ø –û–ü–ï–†–ê–¶–ò–Ø –ù–ï–û–ë–†–ê–¢–ò–ú–ê</b>\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?</i>", parse_mode="HTML", reply_markup=board.as_markup())
        asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))


    elif data == "giveaway_stop_choise":
        with sqlite3.connect('data/db/giveaway/giveaway.db') as con:
            cur = con.cursor()
            act = "active"
            name_file = (cur.execute('SELECT giveaway_end FROM giveaways_data WHERE giveaway_status = ?', [act]).fetchone())[0]
        await state.set_state(GIVEAWAY.name_file)
        await state.update_data(name_file=name_file)
        await state.set_state(GIVEAWAY.stop_reason)
        board = InlineKeyboardBuilder()
        board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
        sent_message = await callback_query.message.edit_text("<i>–î–ª—è –æ—Ç–º–µ–Ω—ã —Ä–æ–∑—ã–≥—Ä—ã—à–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É.\n–ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ –∫–∞–∫–æ–π –ø—Ä–∏—á–∏–Ω–µ –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è —Ä–æ–∑—ã–≥—Ä—ã—à\n\n<b>–ñ–î–£</b></i>", parse_mode="HTML", reply_markup=board.as_markup())
        asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))


    elif data == "giveaway_stop_go":
        path = 'data/db/giveaway/giveaway.db'
        reason_data = await state.get_data()
        reason = reason_data['stop_reason']
        name_file = reason_data['name_file']
        await state.clear()
        try:
            with sqlite3.connect('data/db/giveaway/giveaway.db') as con:
                cur = con.cursor()
                cur.execute(f'UPDATE giveaways_data SET giveaway_status = ? WHERE giveaway_status = "active" ', ["finish"])
                con.commit()
            board = InlineKeyboardBuilder()
            board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
            with open(f'data/history/log {name_file}.txt', "a", encoding="utf-8") as f:
                text = f'<b>–†–æ–∑—ã–≥—Ä—ã—à –æ—Ç–º–µ–Ω–∏–ª</b> {nick}\n<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}'
                f = f.write(text)
            sent_message = await callback_query.message.edit_text("<i>–ê–∫—Ç–∏–≤–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à –æ—Ç–º–µ–Ω–µ–Ω\n–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–æ–±–∞–≤–ª–µ–Ω–∞</i>", parse_mode="HTML", reply_markup=board.as_markup())
            asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))
        except:
            board = InlineKeyboardBuilder()
            board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
            sent_message = await callback_query.message.edit_text("<i>–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à. –ü–∏—à–∏ –≤ SOS</i>", parse_mode="HTML", reply_markup=board.as_markup())
            asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))
       

    elif data == "giveaway_random":
        act = "active"
        stop_flag = 0
        result = "–ù–∞—Ä–∞–Ω–¥–æ–º–∏–ª:\n"
        with sqlite3.connect('data/db/giveaway/giveaway.db') as con:
            cur = con.cursor()
            cur.execute(f"DROP TABLE IF EXISTS winners")
            cur.execute(f"DROP TABLE IF EXISTS loser")
            con.commit()
            cur.execute('''
            CREATE TABLE IF NOT EXISTS winners(
                    id INTEGER PRIMARY KEY AUTOINCREMENT, 
                    id_tg VARCHAR (20),
                    us_nick VARCHAR (20),
                    us_name VARCHAR (20),
                    password VARCHAR (30),
                    us_ava BLOB
                    )''')
            cur.execute('''
            CREATE TABLE IF NOT EXISTS loser(
                    id INTEGER PRIMARY KEY AUTOINCREMENT, 
                    id_tg VARCHAR (20),
                    us_name VARCHAR (20),
                    reason VARCHAR (20)
                    )''')
            con.commit()
            
            all = int((cur.execute('SELECT COUNT (*) FROM tributes').fetchone())[0])
            much_win = int((cur.execute('SELECT giveaway_much_win FROM giveaways_data WHERE giveaway_status = ?', [act]).fetchone())[0])
            chan_id = (cur.execute('SELECT chan_id FROM giveaways_data WHERE giveaway_status = ?', [act]).fetchone())[0]
            all = list(range(1, all+1))
            while stop_flag != much_win:
                wins_number = random.sample(all, much_win)
                cur = con.cursor()
                for win in wins_number:
                    idtg = (cur.execute('SELECT id_tg FROM tributes WHERE id = ?', [win]).fetchone())[0]
                    us_nick = (cur.execute('SELECT us_nick FROM tributes WHERE id = ?', [win]).fetchone())[0]
                    us_name = (cur.execute('SELECT us_name FROM tributes WHERE id = ?', [win]).fetchone())[0]
                    podpiska = await bot.get_chat_member(chat_id=chan_id, user_id=idtg)
                    podpiska = podpiska.status
                    if podpiska in ["member", "administrator", "creator"]:
                        if us_nick == "MINUS":
                            cur.execute(f'INSERT INTO loser (id_tg, us_name, reason) VALUES ("{idtg}", "{us_name}", "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–≥")')
                            con.commit()
                            all.remove(win)
                        else:
                            password = ''
                            for x in range(10): #–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ (10)
                                password = password + random.choice(list('1234567890abcdefghigklmnopqrstuvyxwzABCDEFGHIGKLMNOPQRSTUVYXWZ!@#$%^&*()'))
                            ava = (cur.execute('SELECT us_ava FROM tributes WHERE id_tg = ?', [idtg]).fetchone())[0]
                            cur.execute(f'UPDATE tributes SET us_nick = ? WHERE id = {win} ', ["WINNER"])
                            cur.execute('INSERT INTO winners (id_tg, us_nick, us_name, password, us_ava) VALUES (?, ?, ?, ?, ?)', (idtg, us_nick, us_name, password, ava))
                            con.commit()
                            all.remove(win)
                            result += f"{win}) –ù–∏–∫ - {us_nick}    –ò–º—è - {us_name}\n"
                            stop_flag = (cur.execute('SELECT COUNT (*) from winners').fetchone())[0]
                            if stop_flag == much_win:
                                break
                    else: 
                        cur.execute(f'INSERT INTO loser (id_tg, us_name, reason) VALUES ("{idtg}", "{us_name}", "–æ—Ç–ø–∏—Å–∞–ª—Å—è")')
                        con.commit() 
                        all.remove(win)
                
        board = InlineKeyboardBuilder()
        board.add(types.InlineKeyboardButton(text="‚úÖOk", callback_data="giveaway_finish"))
        board.add(types.InlineKeyboardButton(text="‚ùå–ó–∞–Ω–æ–≤–æ", callback_data="admentest_rename"))
        board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
        board.adjust(2, 1)
        sent_message = await callback_query.message.answer(f"{result}\n<i>–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º? –≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è <b>–Ω–µ–æ–±—Ä–∞—Ç–∏–º–∞</b>, —Ä–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è</i>", parse_mode="HTML", reply_markup=board.as_markup())
        asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))


    elif data == "giveaway_finish":
        act = "active"
        end = "finish"
        text = f"<b>–ë–∞—Ä–∞–±–∞–Ω –∫—Ä—É—Ç–∏–ª</b> {nick}\n<b>–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ :</b>\n"
        with sqlite3.connect('data/db/giveaway/giveaway.db') as con:
            cur = con.cursor()
            win_date = (cur.execute('SELECT giveaway_end FROM giveaways_data WHERE giveaway_status = ?', [act]).fetchone())[0]
            cur.execute('SELECT id, id_tg, us_nick, us_name, password FROM winners')
            rows = cur.fetchall()
        for row in rows:
            text += f"{row[0]}) –ù–∏–∫ - {row[2]}, –ò–º—è - {row[3]}, –ü–∞—Ä–æ–ª—å - {row[4]}\n"
            try:
                idtg = int(row[1])
                await bot.send_message(idtg, f"<i>–ü—Ä–∏–≤–µ—Ç, {row[3]}!\n–í—ã –ø–æ–±–µ–¥–∏–ª–∏ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –æ—Ç Firestorm.\n–ü–∞—Ä–æ–ª—å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à–∞</i>\nüëâüèª <b>{row[4]}</b> üëàüèª\n<i>–°–æ–æ–±—â–∏—Ç–µ –µ–≥–æ <u>Aorid</u> –∏–ª–∏ <u>Retmex</u> –≤ –¥–∏—Å–∫–æ—Ä–¥–µ –∏ –ø–æ–ª—É—á–∏—Ç–µ —Å–≤–æ–π –ø—Ä–∏–∑!</i>", parse_mode="HTML")
                text += "—Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–æ–ª–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ\n"
            except Exception as e:
                text += f"—Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–æ–ª–µ–º –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –û—à–∏–±–∫–∞ {e}\n"
        with open (f'data/history/log {win_date}.txt', "a", encoding="utf-8") as file:
            file.write(text)
        try:
            loser_text = '<b>–õ—É–∑–µ—Ä–∞:</b>\n'
            with sqlite3.connect('data/db/giveaway/giveaway.db') as con:
                cur = con.cursor()
                cur.execute("SELECT * FROM loser")
                rows = cur.fetchall()

            for row in rows:
                loser_text += f'{row[0]}) <b>Idtg</b> - {row[1]}, <b>name</b> - {row[2]}\n<b>–ü—Ä–∏—á–∏–Ω–∞</b> - {row[3]}\n'
            with open (f'data/history/log {win_date}.txt', "a", encoding="utf-8") as file:
                file.write(loser_text)
        except Exception as e:
            await callback_query.message.answer(f"<i>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –ª—É–∑–µ—Ä–æ–≤\n–û—à–∏–±–∫–∞ {e}</i>", parse_mode="HTML")
        with sqlite3.connect('data/db/giveaway/giveaway.db') as con:
            cur = con.cursor()
            cur.execute("SELECT * FROM winners")
            rows = cur.fetchall()

        date = datetime.today()
        date = date.strftime("%d.%m.%Y")

        with sqlite3.connect('data/db/giveaway/winners.db') as con:
            cur = con.cursor()
            cur.execute('CREATE TABLE IF NOT EXISTS winners(Id INTEGER PRIMARY KEY AUTOINCREMENT, id_tg VARCHAR (20), us_nick VARCHAR (40), us_name VARCHAR (40), password VARCHAR (20), us_ava BLOB, ava_path VARCHAR (200), giveaway_date VARCHAR (20))')
            for row in rows:
                cur.execute('INSERT INTO winners (id_tg, us_nick, us_name, password, us_ava, giveaway_date) VALUES (?, ?, ?, ?, ?, ?)', (row[1], row[2], row[3], row[4], row[5], date))
            con.commit()
        with sqlite3.connect('data/db/giveaway/giveaway.db') as con:
            cur = con.cursor()
            cur.execute(f'UPDATE giveaways_data SET admin_end = ? WHERE giveaway_status = "active" ', [nick])
            chan_id = int((cur.execute('SELECT chan_id FROM giveaways_data WHERE giveaway_status = ?', [act]).fetchone())[0])
            cur.execute(f'UPDATE giveaways_data SET giveaway_status = ? WHERE giveaway_status = "active" ', ["finish"])
            con.commit()
        board = InlineKeyboardBuilder()
        board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
        sent_message = await callback_query.message.answer(f"<i>–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n–ò—Å—Ç–æ—Ä–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –∑–∞–ø–∏—Å–∞–Ω–∞\n–†–æ–∑—ã–≥—Ä—ã—à –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω</i>", parse_mode="HTML", reply_markup=board.as_markup())
        asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))
        scr = FSInputFile("data/variables/post/start_post.jpg")
        with open('data/variables/post/end_post.txt', "r", encoding="utf-8") as f:
            caption = f.read()
        board = InlineKeyboardBuilder()
        board.add(types.InlineKeyboardButton(text="üéÅ–£–∑–Ω–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—ÇüéÅ", url='https://t.me/Firestorm_contest_bot'))
        await bot.send_photo(chat_id=chan_id, photo=scr, caption=caption, parse_mode="HTML", reply_markup=board.as_markup())
        
        # –õ—å–µ–º –±–∞–∑—É –Ω–∞ WebApp
        api_username = 'firestormwebapp'
        api_token = '2189e082315434ef3a071884a88db47ce912e954'
        remote_path = '/home/firestormwebapp/webapp/winners.db'
        file_path = 'data/db/giveaway/winners.db'
        url = f"https://www.pythonanywhere.com/api/v0/user/{api_username}/files/path{remote_path}"
        headers = {"Authorization": f"Token {api_token}"}
        with open(file_path, "rb") as file:
            file_content = file.read()
        response = requests.post(url, headers=headers, files={"content": file_content})


    elif data == "channal_plus":
        await state.set_state(CHAN.name_chan)
        board = InlineKeyboardBuilder()
        board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
        sent_message = await callback_query.message.edit_text("<i>–í–≤–æ–¥–∏ <b>–∏–º—è</b> –∫–∞–Ω–∞–ª–∞</i>", parse_mode="HTML", reply_markup=board.as_markup())
        asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))


    elif data == "channal_minus":
        con = sqlite3.connect('data/db/giveaway/chan_data.db')
        cur = con.cursor()
        cur.execute("SELECT * FROM channals")
        rows = cur.fetchall()
        con.close()
        board = InlineKeyboardBuilder()
        try:
            for row in rows:
                board.add(types.InlineKeyboardButton(text=f"{row[2]}", callback_data=f"chan_minus:{row[0]}"))
            board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
            board.adjust(1)
            sent_message = await callback_query.message.edit_text(f"<i>–í—ã–±–∏—Ä–∞–π –∫–∞–Ω–∞–ª –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–¥–æ <b><u>–£–î–ê–õ–ò–¢–¨</u></b></i>", parse_mode="HTML", reply_markup=board.as_markup())
            asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))
        except:
            board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
            board.adjust(1)
            sent_message = await callback_query.message.edit_text(f"<i>–í—Å–µ –∫–∞–Ω–∞–ª—ã —É–¥–∞–ª–µ–Ω—ã</i>", parse_mode="HTML", reply_markup=board.as_markup())
            asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))


    elif data == "post_ok":
        giveaway_data = await state.get_data()
        admin_nick = callback_query.from_user.username
        chan_id = int(giveaway_data['chan_id'])
        chan_link = giveaway_data['link']
        chan_name = giveaway_data['name']
        date_end = giveaway_data['date_end']
        await state.clear()
        jpg_post = FSInputFile("data/variables/post/start_post.jpg")
        with open('data/variables/post/start_post.txt', "r", encoding="utf-8") as f:
            text_post = f.read()
        board = InlineKeyboardBuilder()
        board.add(types.InlineKeyboardButton(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", url='https://t.me/Firestorm_contest_bot'))
        msg = await bot.send_photo(chat_id=chan_id, photo=jpg_post, caption=text_post, parse_mode="HTML", reply_markup=board.as_markup())
        msg_id = msg.message_id
        with sqlite3.connect('data/db/giveaway/giveaway.db') as con:
            cur = con.cursor()
            cur.execute(f'INSERT INTO giveaways_data (admin_start, chan_name, chan_id, chan_link, msg_id, giveaway_status, giveaway_end) VALUES ("{admin_nick}", "{chan_name}", "{chan_id}", "{chan_link}", "{msg_id}", "active", "{date_end}")')
            con.commit()
        board = InlineKeyboardBuilder()
        board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
        date_end = datetime.strptime(date_end, "%d_%m_%Y")
        name_file = date_end.strftime("%d_%m_%Y")
        date_end = date_end.strftime("%d.%m.%Y")
        with open(f'data/history/log {name_file}.txt', "w", encoding="utf-8") as f:
            text = f'<b>–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞</b> {date_end}\n<b>–†–æ–∑—ã–≥—Ä—ã—à —Å–æ–∑–¥–∞–ª</b> {admin_nick}\n'
            f = f.write(text)
        sent_message = await callback_query.message.edit_text(f"<i>–ü–æ—Å—Ç —É–ª–µ—Ç–µ–ª, –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–æ–Ω—á–µ–Ω–æ, –º–æ–∂–Ω–æ –æ—Ç–¥—ã—Ö–∞—Ç—å –¥–æ {date_end}\n–ñ–º–∏ –∫–Ω–æ–ø–∫—É</i>", parse_mode="HTML", reply_markup=board.as_markup())
        asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))


    elif data == 'calendar_start':
        await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=await SimpleCalendar().start_calendar())


    elif data == 'admentest':
        board = InlineKeyboardBuilder()
        board.add(types.InlineKeyboardButton(text="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data="admentest_bd"))
        board.add(types.InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö–µ—Ä–Ω–∏", callback_data="admentest_rename"))
        board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
        board.adjust(1)
        sent_message = await callback_query.message.edit_text("<i>–í—ã–±–∏—Ä–∞–π –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç</i>", parse_mode="HTML", reply_markup=board.as_markup())
        asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))


    elif data == 'admentest_bd':
        print ("ghjdthrf")


    elif data == "admentest_rename":
        print ("ghjdthrf")




# –†—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@dp.message(manual_send.idtg)
async def manual_send_idtg(message: Message, state: FSMContext):
    await state.update_data(idtg=message.text)
    await message.answer ("<i>–¢–µ–ø–µ—Ä—å –≤–≤–æ–¥–∏ Name</i>", parse_mode="HTML")
    await state.set_state(manual_send.name)
@dp.message(manual_send.name)
async def manual_send_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer ("<i>–¢–µ–ø–µ—Ä—å –≤–≤–æ–¥–∏ Password</i>", parse_mode="HTML")
    await state.set_state(manual_send.password)
@dp.message(manual_send.password)
async def manual_send_name(message: Message, state: FSMContext):
    await state.update_data(password=message.text)
    manual_data = await state.get_data()
    
    try:
        name = manual_data['name']
        password = manual_data['password']
        board = InlineKeyboardBuilder()
        with open(f'data/variables/text/manual_send.txt', "w", encoding="utf-8") as file:
            text = f'<i>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {name}!!! üëãüèª\n–í—ã –ø–æ–±–µ–¥–∏–ª–∏ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –æ—Ç <b><a href="https://firestorm-servers.com/ru">Firestorm</a></b> ü•≥\n–ü–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à–∞ \nüëâüèª {password} üëàüèª\n–°–æ–æ–±—â–∏—Ç–µ –µ–≥–æ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–∏—Å–∫–æ—Ä–¥ <u>Aorid</u> –ª–∏–±–æ <u>Retmex</u> –∏ –ø–æ–ª—É—á–∏—Ç–µ —Å–≤–æ–π –ø—Ä–∏–∑ üèÜ !</i>'
            file.write(text)
        board.add(types.InlineKeyboardButton(text="‚úÖ–û—Ç–ø—Ä–∞–≤–ª—è–µ–º‚úÖ", callback_data="manual_send_go"))
        board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–û—Ç–º–µ–Ω–∞‚Ü©Ô∏è", callback_data="ok"))
        board.adjust(1)
        sent_message = await message.answer (f'<i>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π:\n–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {name}!!! üëãüèª\n–í—ã –ø–æ–±–µ–¥–∏–ª–∏ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –æ—Ç <b><a href="https://firestorm-servers.com/ru">Firestorm</a></b> ü•≥\n–ü–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à–∞ \nüëâüèª {password} üëàüèª\n–°–æ–æ–±—â–∏—Ç–µ –µ–≥–æ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–∏—Å–∫–æ—Ä–¥ <u>Aorid</u> –ª–∏–±–æ <u>Retmex</u> –∏ –ø–æ–ª—É—á–∏—Ç–µ —Å–≤–æ–π –ø—Ä–∏–∑ üèÜ !</i>', parse_mode="HTML", disable_web_page_preview=True, reply_markup=board.as_markup())
        asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))
    except:
        board = InlineKeyboardBuilder()
        board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
        sent_message = await message.answer (f"<i>–û—à–∏–±–∫–∞ –≤ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—Å–∫–æ—Ä–µ–π –≤—Å–µ–≥–æ idtg) </i>", parse_mode="HTML", reply_markup=board.as_markup())
        asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
@dp.message(GIVEAWAY.much_win)
async def much_win(message: Message, state: FSMContext):
    await state.update_data(much_win=message.text)
    win_data = await state.get_data()
    await state.clear()
    try:
        much_win = int(win_data['much_win'])
        act = 'active'
        if much_win > 0:
            with sqlite3.connect('data/db/giveaway/giveaway.db') as con:
                cur = con.cursor()
                cur.execute(f'UPDATE giveaways_data SET giveaway_much_win = ? WHERE giveaway_status = "active" ', [much_win])
                con.commit()
            board = InlineKeyboardBuilder()
            board.add(types.InlineKeyboardButton(text="‚úÖ–î–∞–ª–µ–µ", callback_data="giveaway_random"))
            board.add(types.InlineKeyboardButton(text="‚ùå–ü–µ—Ä–µ–¥—É–º–∞–ª", callback_data="ok"))
            sent_message = await message.answer(f"<i>üëå –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –±—É–¥–µ—Ç <u>{much_win}</u>\n–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∂–º–∏ –∫–Ω–æ–ø–∫—É</i>", parse_mode="HTML", reply_markup=board.as_markup())
            asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))
        else:
            await state.set_state(GIVEAWAY.much_win)
            board = InlineKeyboardBuilder()
            board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
            sent_message = await message.answer(f"<i><b>–ö–∞–∫ —Ç—ã —Å–µ–±–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—à—å {much_win} –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π??\n–í–≤–æ–¥–∏ –∫–æ—Ä–µ–∫—Ç–Ω–æ–µ –¶–ï–õ–û–ï —á–∏—Å–ª–æ, –∏–ª–∏ –∂–º–∏ –æ—Ç–º–µ–Ω—É</b></i>", parse_mode="HTML", reply_markup=board.as_markup())
            asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))
    except Exception as e:
        await state.set_state(GIVEAWAY.much_win)
        board = InlineKeyboardBuilder()
        board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
        sent_message = await message.answer(f"<i><b>–®—É—Ç–æ—á–∫–∏ –∑–∞ 300??</b>\n–í–≤–æ–¥–∏ –∫–æ—Ä–µ–∫—Ç–Ω–æ–µ –¶–ï–õ–û–ï —á–∏—Å–ª–æ, –∏–ª–∏ –∂–º–∏ –æ—Ç–º–µ–Ω—É</i>", parse_mode="HTML", reply_markup=board.as_markup())
        asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))



# –†–∞–∑–±–∏–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –º–∞–∫—Å–∏–º—É–º 4096 –∑–Ω–∞–∫–æ–≤
async def split_message(text: str, max_length: int = 4096) -> list[str]:
    return [text[i:i + max_length] for i in range(0, len(text), max_length)]

        
@dp.message(GIVEAWAY.stop_reason)
async def stop(message: Message, state: FSMContext):
    await state.update_data(stop_reason=message.text)
    board = InlineKeyboardBuilder()
    board.add(types.InlineKeyboardButton(text="‚úÖ–î–∞, —è —É–≤–µ—Ä–µ–Ω", callback_data="giveaway_stop_go"))
    board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
    board.adjust(1)
    sent_message = await message.answer("<i>–ü—Ä–∏—á–∏–Ω—É –ø—Ä–∏–Ω—è–ª, –Ω–æ —Å–ø—Ä–æ—à—É –µ—â–µ —Ä–∞–∑:\n–¢–æ—á–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à???</i>", parse_mode="HTML", reply_markup=board.as_markup())
    asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))

# –ì–æ—Ç–æ–≤–∏–º –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞
@dp.message(GIVEAWAY.post)
async def giveaway_post(message: Message, state: FSMContext):
    if message.caption:
        photo = message.photo[-1]  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ —Å —Å–∞–º—ã–º –≤—ã—Å–æ–∫–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
        file_id = photo.file_id
        file = await bot.get_file(file_id)
        file_path = file.file_path
        download_path = os.path.join('data/variables/post', "start_post.jpg")
        await bot.download_file(file_path, destination=download_path)

        description = message.html_text
        description_path = os.path.join('data/variables/post', "start_post.txt")
        with open(description_path, "w", encoding="utf-8") as f:
            f.write(description)
        with open(description_path, "r", encoding="utf-8") as f:
            text_post = f.read()
        jpg_post = FSInputFile("data/variables/post/start_post.jpg")

        board = InlineKeyboardBuilder()
        board.add(types.InlineKeyboardButton(text="‚úÖ–û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="post_ok"))
        board.add(types.InlineKeyboardButton(text="‚ùå–ü–µ—Ä–µ–¥–µ–ª–∞—Ç—å", callback_data="giveaway_start"))
        board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
        board.adjust(2, 1)
        sent_message = await bot.send_photo(message.from_user.id, photo=jpg_post, caption=f"{text_post}", parse_mode="HTML")
        asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))

        sent_message = await message.answer("<i>üëÜüëÜüëÜüëÜüëÜüëÜüëÜ\n\n–í–æ—Ç —Ç–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–≤–æ–π –ø–æ—Å—Ç.\n–ï—Å–ª–∏ –≤—Å—ë —Ö–æ—Ä–æ—à–æ - –∂–º–∏ <b>–û—Ç–ø—Ä–∞–≤–∏—Ç—å</b> –∏ –ø–æ—Å—Ç –ø–æ–ª–µ—Ç–∏—Ç –≤ –∫–∞–Ω–∞–ª</i>", parse_mode="HTML", reply_markup=board.as_markup())
        asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))

# –í–Ω–æ—Å–∏–º –∫–∞–Ω–∞–ª –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
@dp.message(CHAN.name_chan)
async def name_chan(message: Message, state: FSMContext):
    await state.update_data(name_chan=message.text)
    sent_message = await message.answer("<i>–¢–µ–ø–µ—Ä—å –º–Ω–µ –Ω–∞–¥–æ <b>ID –∫–∞–Ω–∞–ª–∞</b>\nID –∫–∞–Ω–∞–ª–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —Ü–∏—Ñ—Ä, —É–∑–Ω–∞—Ç—å –µ–≥–æ –º–æ–∂–Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, —É @LeadConverterToolkitBot</i>", parse_mode="HTML")
    asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))
    await state.set_state(CHAN.id_chan)
@dp.message(CHAN.id_chan)
async def id_chan(message: Message, state: FSMContext):
    await state.update_data(id_chan=message.text)
    sent_message = await message.answer("<i>–û—Ç–ª–∏—á–Ω–æ, –æ—Å—Ç–∞–ª–æ—Å—å –≤–Ω–µ—Å—Ç–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª\n–ñ–¥—É</i>", parse_mode="HTML")
    asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))
    await state.set_state(CHAN.link_chan)
@dp.message(CHAN.link_chan)
async def link_chan(message: Message, state: FSMContext):
    await state.update_data(link_chan=message.text)
    chan_data = await state.get_data()
    name = chan_data['name_chan']
    id_chan = chan_data['id_chan']
    link = chan_data['link_chan']
    await state.clear()
    con = sqlite3.connect('data/db/giveaway/chan_data.db')
    cur = con.cursor()
    cur.execute(f'INSERT INTO channals (id_chan, name, link) VALUES ("{id_chan}", "{name}", "{link}")')
    con.commit()
    con.close()
    con = sqlite3.connect('data/db/giveaway/chan_data.db')
    cur = con.cursor()
    cur.execute("SELECT * FROM channals")
    rows = cur.fetchall()
    con.close()
    board = InlineKeyboardBuilder()
    try:
        for row in rows:
            board.add(types.InlineKeyboardButton(text=f"{row[2]}", callback_data=f"giveaway:{row[0]}"))
        board.add(types.InlineKeyboardButton(text="‚ûï–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª‚ûï", callback_data="channal_plus"))
        board.add(types.InlineKeyboardButton(text="‚ûñ–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª‚ûñ", callback_data="channal_minus"))
        board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
        board.adjust(*[1] * len(rows), 2, 1)
        sent_message = await message.answer(f"<i>–í—ã–±–∏—Ä–∞–π –∫–∞–Ω–∞–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞</i>", parse_mode="HTML", reply_markup=board.as_markup())
        asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))
    except:
        board.add(types.InlineKeyboardButton(text="‚ûï–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª‚ûï", callback_data="channal_plus"))
        board.add(types.InlineKeyboardButton(text="‚ûñ–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª‚ûñ", callback_data="channal_minus"))
        board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
        board.adjust(*[1] * len(rows), 2, 1)
        sent_message = await message.answer(f"<i>–í—ã–±–∏—Ä–∞–π –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç</i>", parse_mode="HTML", reply_markup=board.as_markup())
        asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))


# –ò–Ω—Å—Ç—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ—Ç–æ–º–∫–æ–≤
@dp.message(ADMINS.text)
async def note_text(message: Message, state: FSMContext):
    await state.update_data(text=message.text)
    sent_message = await message.answer("<i>–¢–µ–ø–µ—Ä—å –¥–∞–π —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç</i>", parse_mode="HTML")
    asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))
    await state.set_state(ADMINS.link)
@dp.message(ADMINS.link)
async def note_link(message: Message, state: FSMContext):
    await state.update_data(link=message.text)
    sent_message = await message.answer("<i>–û—Å—Ç–∞–ª–æ—Å—å –æ–ø–∏—Å–∞—Ç—å, —á—Ç–æ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å —Å –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ —Å–∞–π—Ç–∞</i>", parse_mode="HTML")
    asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))
    await state.set_state(ADMINS.desc)
@dp.message(ADMINS.desc)
async def note_link(message: Message, state: FSMContext):
    await state.update_data(desc=message.text)
    note_data = await state.get_data()
    admin_nick = message.from_user.username
    link = note_data['link']
    desc = note_data['desc']
    text = note_data['text']
    await state.clear()
    con = sqlite3.connect('data/db/notepad/notepad.db')
    cur = con.cursor()
    cur.execute(f'INSERT INTO note (admin_nick, link, desc, text) VALUES ("{admin_nick}", "{link}", "{desc}", "{text}")')
    con.commit()
    cur.close()
    con.close()
    con = sqlite3.connect('data/db/notepad/notepad.db')
    cur = con.cursor()
    all = cur.execute("SELECT id FROM note ORDER BY id DESC LIMIT 1")
    all = int((cur.fetchone())[0])
    cur.execute("SELECT * FROM note")
    rows = cur.fetchall()
    board = InlineKeyboardBuilder()
    for i in range (1, all+1):
        try:
            text = cur.execute("SELECT text FROM note WHERE id = ?", (i,)).fetchone()
            text = text[0]
            board.add(types.InlineKeyboardButton(text=f"{text}", callback_data=f"notepad_{i}"))
        except:
            pass
    con.close()
    board.add(types.InlineKeyboardButton(text="‚ûï–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å‚ûï", callback_data="note_plus"))
    board.add(types.InlineKeyboardButton(text="‚ûñ–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å‚ûñ", callback_data="note_minus"))
    board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–û—Ç–º–µ–Ω–∞‚Ü©Ô∏è", callback_data="ok"))
    board.adjust(*[1] * len(rows), 2, 1)
    sent_message = await message.answer("<i><b>Firestorm</b> –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –≤—Å–µ–≥–¥–∞.\n–ü–æ—ç—Ç–æ–º—É –Ω–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ—Ç–æ–º–∫–æ–≤.\n–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω</i>", parse_mode="HTML", reply_markup=board.as_markup())
    asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))


@dp.message(ADMINS.minus)                     
async def note_minus(message: Message, state: FSMContext):
    await state.update_data(note_minus=message.html_text)
    note_data = await state.get_data()
    number = note_data['note_minus']
    await state.clear()
    con = sqlite3.connect('data/db/notepad/notepad.db')
    cur = con.cursor()
    cur.execute("DELETE FROM note WHERE id = ?", (number,))    
    con.commit()
    con.close()
    con = sqlite3.connect('data/db/notepad/notepad.db')
    cur = con.cursor()
    all = cur.execute("SELECT id FROM note ORDER BY id DESC LIMIT 1")
    all = int((cur.fetchone())[0])
    board = InlineKeyboardBuilder()
    cur.execute("SELECT * FROM note")
    rows = cur.fetchall()
    for i in range (1, all+1):
        try:
            text = cur.execute("SELECT text FROM note WHERE id = ?", (i,)).fetchone()
            text = text[0]
            board.add(types.InlineKeyboardButton(text=f"{text}", callback_data=f"notepad_{i}"))
        except:
            pass
    con.close()
    board.add(types.InlineKeyboardButton(text="‚ûï–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å‚ûï", callback_data="note_plus"))
    board.add(types.InlineKeyboardButton(text="‚ûñ–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å‚ûñ", callback_data="note_minus"))
    board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–û—Ç–º–µ–Ω–∞‚Ü©Ô∏è", callback_data="ok"))
    board.adjust(*[1] * len(rows), 2, 1)
    sent_message = await message.answer("<i><b>Firestorm</b> –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –≤—Å–µ–≥–¥–∞.\n–ü–æ—ç—Ç–æ–º—É –Ω–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ—Ç–æ–º–∫–æ–≤.\n–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω</i>", parse_mode="HTML", reply_markup=board.as_markup())
    asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))


# SOS –∞–¥–º–∏–Ω—É
@dp.message(ADMINS.help)
async def admin_plus(message: Message, state: FSMContext):
    await state.update_data(help=message.html_text)
    nick = message.from_user.username
    user_data = await state.get_data()
    with open("data/variables/text/SOS.txt", "w", encoding="utf-8") as file:
        file.write(f"<b>–ê–¥–º–∏–Ω:</b> @{nick}\n")
        file.write(f"<b>–ü—Ä–æ–±–ª–µ–º–∞:</b> {user_data['help']}\n")
    with open("data/variables/text/SOS.txt", "r", encoding="utf-8") as file:
        text_sos = file.read()
        try:
            await bot.send_message(chat_id=master_id, text=text_sos, parse_mode="HTML")
            board = InlineKeyboardBuilder()
            board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
            sent_message = await message.answer("<i>üòÇ–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ, –æ–∂–∏–¥–∞–π—Ç–µüòÇ</i>", parse_mode="HTML", reply_markup=board.as_markup())
            asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))

        except:
            board = InlineKeyboardBuilder()
            board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
            sent_message = await message.answer("<i>üòÇ–ß–æ—Ç —Ö–æ–∑—è–∏–Ω –ø–æ—Ç–µ—Ä—è–ª—Å—è\n–¢–∞–∫ —á—Ç–æ –µ—Å–ª–∏ –∫–∞–∫–∏–µ-—Ç–æ –ø—Ä–æ–±–ª–µ–º—ã - —Ä–µ—à–∞–πüòÇ</i>", parse_mode="HTML", reply_markup=board.as_markup())
            asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –≤ –ë–î
@dp.message(ADMINS.idtg)
async def admin_plus(message: Message, state: FSMContext):
    await state.update_data(idtg=message.text)
    board = InlineKeyboardBuilder()
    board.add(types.InlineKeyboardButton(text="admin", callback_data="role_admin"))
    board.add(types.InlineKeyboardButton(text="master", callback_data="role_master"))
    sent_message = await message.answer("<i>–í—ã–±–µ—Ä–∏ —Ä–æ–ª—å</i>", parse_mode="HTML", reply_markup=board.as_markup())
    asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))


# –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
def get_sorted_items(path: str):
    files = []
    for filename in os.listdir(HISTORY_DIR):
        filepath = os.path.join(HISTORY_DIR, filename)
        if os.path.isfile(filepath):
            mtime = os.path.getmtime(filepath)
            files.append({
                'name': filename,
                'path': filepath,
                'date': datetime.fromtimestamp(mtime).strftime('%Y-%m-%d %H:%M:%S'),
                'mtime': mtime
            })
    
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (—Å–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ)
    files.sort(key=lambda x: x['mtime'])
    return files


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
async def list_directory(message: types.Message, path: str):
    items = get_sorted_items(HISTORY_DIR)
    files = items
    MAX_FILES = 12
    if len(files) > MAX_FILES:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ)
        files_to_delete = files[MAX_FILES:]
        for file in files_to_delete:
            try:
                os.remove(file['path'])
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
    files = items
    board = InlineKeyboardBuilder()
    for file in files:
        button_text = (file['name']).split(" ", 1)[1]
        filename = button_text
        button_text = button_text.split(".", 1)[0]
        board.add(types.InlineKeyboardButton(text=button_text, callback_data=f"log:{filename}"))
    board.row(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
    board.adjust(*[3] * len(files), 1)
    sent_message = await message.edit_text("<i>–ö–æ–≥–¥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏–ª—Å—è —Ä–æ–∑—ã–≥—Ä—ã—à?\n–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è</i>", parse_mode="HTML", reply_markup=board.as_markup())
    asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω/—é–∑–µ—Ä
def is_user_admin(user_id: int):
    con = sqlite3.connect('data/db/role/admin.db')
    cur = con.cursor()
    cur.execute("SELECT * FROM admins WHERE idtg = ?", (user_id,))
    user = cur.fetchone()
    con.close()
    return user is not None

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –≤ –ë–î
def role_in_db(user_id: str):
    with sqlite3.connect('data/db/role/admin.db') as con:
        cur = con.cursor()
        cur.execute('SELECT role FROM admins WHERE idtg = ?', [user_id])
        result = cur.fetchone()
    return result[0] if result else None

# –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏
async def delete_message_after_delay(chat_id: int, message_id: int, delay: int = 600):
    await asyncio.sleep(delay)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    await bot.delete_message(chat_id, message_id)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())