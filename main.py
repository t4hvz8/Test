#        random_sticker = random.choice(stickers_hi)
#        await bot.send_sticker(message.chat.id, random_sticker)
#       900865796
# —Å–æ–∑–¥–∞—Ç—å pip freeze > requirements.txt
# —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å pip install -r requirements.txt
#.row - —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏  .add –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ —Å—Ç—Ä–æ–∫—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3)




import sqlite3
import os
import asyncio
import random

from datetime import datetime, timedelta

import logging

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message


from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import CallbackQuery
from aiogram.filters.callback_data import CallbackData

from aiogram.types.input_file import FSInputFile

from aiogram_calendar import SimpleCalendarCallback, SimpleCalendar

from config import *
from stikers import *


bot = Bot(token=TOKEN)
dp = Dispatcher()

HISTORY_DIR = "data/history"
logging.basicConfig(level=logging.INFO)

logging.basicConfig(level=logging.INFO, filename='data/variables/log.txt', format='%(asctime)s - %(message)s')

class ADMINS(StatesGroup):
    idtg = State()
    role = State()
    delete = State()
    help = State()
    text = State()
    link = State()
    desc = State()
    minus = State()

class CHAN(StatesGroup):
    name_chan = State()
    id_chan = State()
    link_chan = State()

class GIVEAWAY(StatesGroup):
    chan_id = State()
    name = State()
    post = State()
    link = State()
    giveaway_end = State()




# –°–æ–∑–¥–∞–µ–º –ë–î –∞–¥–º–∏–Ω–æ–≤
con = sqlite3.connect('data/db/role/admin.db')
cur = con.cursor()
cur.execute('''
    CREATE TABLE IF NOT EXISTS admins(
            id INTEGER PRIMARY KEY AUTOINCREMENT, 
            idtg VARCHAR (20), 
            name VARCHAR (40), 
            nick VARCHAR (40),
            role VARCHAR (20)
            )''')
con.commit()
cur.close()
con.close()

# –°–æ–∑–¥–∞–µ–º –ë–î –∑–∞–ø–∏—Å–æ–∫
con = sqlite3.connect('data/db/notepad/notepad.db')
cur = con.cursor()
cur.execute('''
    CREATE TABLE IF NOT EXISTS note(
            id INTEGER PRIMARY KEY AUTOINCREMENT, 
            admin_nick VARCHAR (20), 
            link VARCHAR (800), 
            desc VARCHAR (400),
            text VARCHAR (20)
            )''')
con.commit()
cur.close()
con.close()

# –°–æ–∑–¥–∞–µ–º –ë–î –∫–∞–Ω–∞–ª–æ–≤
con = sqlite3.connect('data/db/giveaway/chan_data.db')
cur = con.cursor()
cur.execute('''
    CREATE TABLE IF NOT EXISTS channals(
            id INTEGER PRIMARY KEY AUTOINCREMENT, 
            id_chan VARCHAR (20), 
            name VARCHAR (40), 
            link VARCHAR (40)
            )''')
con.commit()
cur.close()
con.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start(message: types.Message):
    user_id = message.from_user.id
    name = message.chat.first_name
    nick = message.from_user.username
    
    if is_user_admin(user_id):
        role = role_in_db(user_id)
        board = InlineKeyboardBuilder()
        con = sqlite3.connect('data/db/role/admin.db')
        cur = con.cursor()
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –∏ –Ω–∏–∫ –∞–¥–º–∏–Ω–∞
        cur.execute(f'UPDATE admins SET name = ? wHERE idtg = {user_id} ', [name])
        cur.execute(f'UPDATE admins SET nick = ? wHERE idtg = {user_id}', [nick])
        con.commit()
        con.close()
        if role == 'master':
            board.row(types.InlineKeyboardButton(text="–†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –∞–¥–º–∏–Ω–æ–≤", callback_data="start_adminbase"))
        board.row(types.InlineKeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–º", callback_data="giveaway"))
        board.row(types.InlineKeyboardButton(text="–ò—Å—Ç–æ—Ä–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π", callback_data="start_history"))
        board.row(types.InlineKeyboardButton(text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="start_notepad"))
        board.row(types.InlineKeyboardButton(text="‚ùóÔ∏èHELP‚ùóÔ∏èSOS‚ùóÔ∏è", callback_data="start_sos"))
        #board.row(types.InlineKeyboardButton(text="–ö–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data="calendar_start"))
        board.adjust(1)
        try:
            con = sqlite3.connect('data/db/giveaway/giveaway.db')
            cur = con.cursor()
            giveaway_link = (cur.execute('SELECT chan_link FROM giveaways_data WHERE giveaway_status = ?', ['active']).fetchone())[0]
            giveaway_name = (cur.execute('SELECT chan_name FROM giveaways_data WHERE giveaway_status = ?', ['active']).fetchone())[0]
            giveaway_msg = (cur.execute('SELECT msg_id FROM giveaways_data WHERE giveaway_status = ?', ['active']).fetchone())[0]
            giveaway_end = (cur.execute('SELECT giveaway_end FROM giveaways_data WHERE giveaway_status = ?', ['active']).fetchone())[0]
            con.close()
            link = (f'{giveaway_link}' + '/' + f'{giveaway_msg}')
            current_date = datetime.today()
            date_obj = datetime.strptime(giveaway_end, "%d.%m.%Y")
            delta = (date_obj - current_date).days
            sent_message = await message.answer (f'üëãüèª <i>–ü—Ä–∏–≤–µ—Ç, {name}!!! üëãüèª\n–°–µ–π—á–∞—Å –∞–∫—Ç–∏–≤–µ–Ω —Ä–æ–∑—ã–≥—Ä—ã—à –≤ –∫–∞–Ω–∞–ª–µ <a href="{giveaway_link}">{giveaway_name}</a> \n–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å—Ç –º–æ–∂–Ω–æ —Ç—É—Ç üëâüèª<a href="{link}">–ñ–ú–Ø–ö</a>\n–î–æ –∫–æ–Ω—Ü–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –æ—Å—Ç–∞–ª–æ—Å—å <b><u>{delta}</u></b> –¥–Ω–µ–π\n–í—ã–±–∏—Ä–∞–π –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç</i>', parse_mode="HTML", disable_web_page_preview=True, reply_markup=board.as_markup())
            asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))
        except:
            sent_message = await message.answer (f"üëãüèª <i>–ü—Ä–∏–≤–µ—Ç, {name}!!! üëãüèª\n–í—ã–±–∏—Ä–∞–π –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç</i>", parse_mode="HTML", reply_markup=board.as_markup())
            asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))
    
    
    
    
    else:
        await message.answer (f"üëãüèª –ü—Ä–∏–≤–µ—Ç, {name}!!! üëãüèª\n–¢—ã –Ω–µ –∞–¥–º–∏–Ω –∏ —Ç–µ–±–µ —Ç—É—Ç –¥–µ–ª–∞—Ç—å –Ω–µ—á–µ–≥–æ", parse_mode="HTML")

@dp.callback_query(lambda c: c.data == "start_history")
async def process_browser(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await list_directory(callback_query.message, HISTORY_DIR)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
@dp.callback_query(lambda c: c.data.startswith("adminminus_"))
async def adminminus(callback_query: types.CallbackQuery):
    await callback_query.answer()
    admin_id = callback_query.data.split("_", 1)[1]
    try:
        con = sqlite3.connect('data/db/role/admin.db')
        cur = con.cursor()
        cur.execute("DELETE FROM admins WHERE idtg = ?", (admin_id,))
        con.commit()
        con.close()
        con = sqlite3.connect('data/db/role/admin.db')
        cur = con.cursor()
        all = cur.execute("SELECT id FROM admins ORDER BY id DESC LIMIT 1")
        all = int((cur.fetchone())[0])
        board = InlineKeyboardBuilder()
        for i in range(1, all+1):
            try:
                nick = cur.execute(f'SELECT nick FROM admins WHERE id = ?', [i]).fetchone()
                idtg = cur.execute(f'SELECT idtg FROM admins WHERE id = ?', [i]).fetchone()
                nick = nick[0]
                idtg = idtg[0]
                board.add(types.InlineKeyboardButton(text=f"{nick}", callback_data=f"adminminus_{idtg}"))
            except:
                pass
        board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–û—Ç–º–µ–Ω–∞‚Ü©Ô∏è", callback_data="ok"))
        await callback_query.message.edit_text("<i>–ê–¥–º–∏–Ω —É–¥–∞–ª–µ–Ω</i>", parse_mode="HTML", reply_markup=board.as_markup())
    except:
        board = InlineKeyboardBuilder()
        board.row(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
        sent_message = await callback_query.message.edit_text("<i>–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞</i>", parse_mode="HTML", reply_markup=board.as_markup())
        asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —á—Ç–µ–Ω–∏—è –±–∞–∑—ã –≤–∏–Ω–Ω–µ—Ä–æ–≤
@dp.callback_query(lambda c: c.data.startswith("winners:"))
async def winners(callback_query: types.CallbackQuery):
    await callback_query.answer()
    file_path = callback_query.data.split(":", 1)[1]
    file_path = f"{HISTORY_DIR}" + "/" + f"{file_path}"
    with open (file_path, 'r', encoding="utf-8") as file:
        winner_text = file.read()
    items = get_sorted_items(HISTORY_DIR)
    board = InlineKeyboardBuilder()
    files = items
    for file in files:
        button_text = file.split(" ", 1)[1]
        button_text = button_text.split(".", 1)[0]
        board.add(types.InlineKeyboardButton(text=button_text, callback_data=f"winners:{file}"))
    board.adjust(*[3] * len(files), 1)
    board.row(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
    sent_message = await callback_query.message.edit_text(f"{winner_text}\n--------------------\n<i>–ö–æ–≥–¥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏–ª—Å—è —Ä–æ–∑—ã–≥—Ä—ã—à?\n–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è</i>", parse_mode="HTML", reply_markup=board.as_markup())
    asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —á—Ç–µ–Ω–∏—è –∑–∞–ø–∏—Å–Ω–æ–π –∫–Ω–∏–∂–∫–∏
@dp.callback_query(lambda c: c.data.startswith("notepad_"))
async def notepad(callback_query: types.CallbackQuery):
    await callback_query.answer()
    i = callback_query.data.split("_", 1)[1]
    con = sqlite3.connect('data/db/notepad/notepad.db')
    cur = con.cursor()
    nick = (cur.execute('SELECT admin_nick FROM note WHERE id = ?', [i]).fetchone())[0]
    link = (cur.execute('SELECT link FROM note WHERE id = ?', [i]).fetchone())[0]
    desc = (cur.execute('SELECT desc FROM note WHERE id = ?', [i]).fetchone())[0]
    text_base = (cur.execute('SELECT text FROM note WHERE id = ?', [i]).fetchone())[0]
    con.close()
    board = InlineKeyboardBuilder()
    con = sqlite3.connect('data/db/notepad/notepad.db')
    cur = con.cursor()
    try:
        all = cur.execute("SELECT id FROM note ORDER BY id DESC LIMIT 1")
        all = int((cur.fetchone())[0])
        cur.execute("SELECT * FROM note")
        rows = cur.fetchall()
        for i in range (1, all+1):
            try:
                text = cur.execute("SELECT text FROM note WHERE id = ?", (i,)).fetchone()
                text = text[0]
                board.add(types.InlineKeyboardButton(text=f"{text}", callback_data=f"notepad_{i}"))
            except:
                pass
    except:
        pass
    con.close()
    board.add(types.InlineKeyboardButton(text="‚ûï–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å‚ûï", callback_data="note_plus"))
    board.add(types.InlineKeyboardButton(text="‚ûñ–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å‚ûñ", callback_data="note_minus"))
    board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–û—Ç–º–µ–Ω–∞‚Ü©Ô∏è", callback_data="ok"))
    board.adjust(*[1] * len(rows), 2, 1)
    sent_message = await callback_query.message.edit_text(f"<i>{text_base}\n{link}\n{desc}\n –î–æ–±–∞–≤–∏–ª <b>@{nick}</b></i>", parse_mode="HTML", disable_web_page_preview=True, reply_markup=board.as_markup())
    asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))

@dp.callback_query(lambda c: c.data.startswith("chan_minus:"))
async def chan_minus (callback_query: types.CallbackQuery):
    await callback_query.answer()
    i = callback_query.data.split(":", 1)[1]
    con = sqlite3.connect('data/db/giveaway/chan_data.db')
    cur = con.cursor()
    cur.execute("DELETE FROM channals WHERE id = ?", (i,))    
    con.commit()
    con.close()
    con = sqlite3.connect('data/db/giveaway/chan_data.db')
    cur = con.cursor()
    cur.execute("SELECT * FROM channals")
    rows = cur.fetchall()
    con.close()
    board = InlineKeyboardBuilder()
    try:
        for row in rows:
            board.add(types.InlineKeyboardButton(text=f"{row[2]}", callback_data=f"giveaway:{row[0]}"))
        board.add(types.InlineKeyboardButton(text="‚ûï–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª‚ûï", callback_data="channal_plus"))
        board.add(types.InlineKeyboardButton(text="‚ûñ–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª‚ûñ", callback_data="channal_minus"))
        board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
        board.adjust(*[1] * len(rows), 2, 1)
        sent_message = await callback_query.message.edit_text(f"<i>–í—ã–±–∏—Ä–∞–π –∫–∞–Ω–∞–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞</i>", parse_mode="HTML", reply_markup=board.as_markup())
        asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))
    except:
        board.add(types.InlineKeyboardButton(text="‚ûï–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª‚ûï", callback_data="channal_plus"))
        board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
        board.adjust(1)
        sent_message = await callback_query.message.edit_text(f"<i>–í—Å–µ –∫–∞–Ω–∞–ª—ã —É–¥–∞–ª–µ–Ω—ã</i>", parse_mode="HTML", reply_markup=board.as_markup())
        asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))

# –°—Ç–∞—Ä—Ç —Ä–æ–∑—ã–≥—Ä—ã—à–∞ (—Å–æ–∑–¥–∞–Ω–∏–µ –ë–î)
@dp.callback_query(lambda c: c.data.startswith("start_giveaway:"))
async def start_giveaway(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    con = sqlite3.connect('data/db/giveaway/giveaway.db')
    cur = con.cursor()
    cur.execute('''
        CREATE TABLE IF NOT EXISTS giveaways_data(
                id INTEGER PRIMARY KEY AUTOINCREMENT, 
                admin_start VARCHAR (20),
                chan_name VARCHAR (30),
                admin_end VARCHAR (20),
                chan_id VARCHAR (20), 
                chan_link VARCHAR (120),
                msg_id VARCHAR (20),
                giveaway_status VARCHAR (20),
                giveaway_end VARCHAR (20),
                giveaway_much_win VARCHAR (20)
                )''')
    
    cur.execute('''
        CREATE TABLE IF NOT EXISTS tributes(
                id INTEGER PRIMARY KEY AUTOINCREMENT, 
                id_tg VARCHAR (20),
                us_nick VARCHAR (20),
                us_name VARCHAR (20),
                podpis VARCHAR (20),
                us_ava BLOB
                )''')   
     
    cur.execute('''
        CREATE TABLE IF NOT EXISTS check_tributes(
                id INTEGER PRIMARY KEY AUTOINCREMENT, 
                id_tg VARCHAR (20),
                us_nick VARCHAR (20),
                us_name VARCHAR (20),
                podpis VARCHAR (20),
                us_ava BLOB
                )''')  
      
    cur.execute('''
        CREATE TABLE IF NOT EXISTS loser(
                id INTEGER PRIMARY KEY AUTOINCREMENT, 
                id_tg VARCHAR (20),
                us_name VARCHAR (20),
                reason VARCHAR (20)
                )''') 
       
    cur.execute('''
        CREATE TABLE IF NOT EXISTS winners(
                id INTEGER PRIMARY KEY AUTOINCREMENT, 
                id_tg VARCHAR (20),
                us_nick VARCHAR (20),
                us_name VARCHAR (20),
                podpis VARCHAR (20),
                us_ava BLOB
                )''') 
    
    con.commit()
    cur.close()
    con.close()

    i = callback_query.data.split(":", 1)[1]
    con = sqlite3.connect('data/db/giveaway/chan_data.db')
    cur = con.cursor()
    text = (cur.execute("SELECT name FROM channals WHERE id_chan = ?", (i,)).fetchone())[0]
    link_chan = (cur.execute("SELECT link FROM channals WHERE id_chan = ?", (i,)).fetchone())[0]
    con.close()
    await state.set_state(GIVEAWAY.chan_id)
    await state.update_data(chan_id=i)
    await state.set_state(GIVEAWAY.link)
    await state.update_data(link=link_chan)
    await state.set_state(GIVEAWAY.name)
    await state.update_data(name=text)
    board = InlineKeyboardBuilder()
    board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
    await state.set_state(GIVEAWAY.post)
    sent_message = await callback_query.message.edit_text(f'<i>–¢–µ–∞—Ç—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –≤–µ—à–∞–ª–∫–∏, –∞ –∫–æ–Ω–∫—É—Ä—Å - —Å –∞–Ω–æ–Ω—Å–∞\n–¢—ã —Ä–µ—à–∏–ª –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω–∫—É—Ä—Å –≤ –∫–∞–Ω–∞–ª–µ <a href="{link_chan}">{text}</a>\n–î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–∏—à–ª–∏ –º–Ω–µ –ø–æ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–º —Ç—ã –∑–∞–ø—É—Å—Ç–∏—à—å –∫–æ–Ω–∫—É—Ä—Å (–ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ñ–æ—Ç–æ –≤–º–µ—Å—Ç–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è).\n\n<b>–ñ–î–£ –ü–û–°–¢</b></i>', parse_mode="HTML", disable_web_page_preview=True)
    asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))


@dp.callback_query(SimpleCalendarCallback.filter())
async def process_simple_calendar(callback_query: types.CallbackQuery, callback_data: dict):
    selected, date = await SimpleCalendar().process_selection(callback_query, callback_data)
    if selected:
        giveaway_end = date.strftime("%d.%m.%Y")
        con = sqlite3.connect('data/db/giveaway/giveaway.db')
        cur = con.cursor()
        cur.execute('UPDATE giveaways_data SET giveaway_end = ? WHERE giveaway_status = "active"', [giveaway_end])
        con.commit()
        con.close()
        board = InlineKeyboardBuilder()
        board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
        current_date = datetime.now()

        await callback_query.message.edit_text(f'<i>–§–∏–∫—Å–∏—Ä—É—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è: <u>{date.strftime("%d.%m.%Y")}</u>\n–†–æ–∑—ã–≥—Ä—ã—à –∑–∞–ø—É—â–µ–Ω, –º–æ–∂–Ω–æ –æ—Ç–¥—ã—Ö–∞—Ç—å</i>', parse_mode="HTML", reply_markup=board.as_markup())



# –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@dp.callback_query()
async def process_callback(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    role = role_in_db(user_id)
    callback_data = callback_query.data
    nick = callback_query.from_user.username
    logging.info(f"–Æ–∑–µ—Ä {nick} –∑–∞–ø—Ä–æ—Å: {callback_data}")
    data = callback_query.data
    await callback_query.answer()

    if data == "ok":
        name = callback_query.from_user.username
        await state.clear()
        board = InlineKeyboardBuilder()
        if role  == 'master':
            board.add(types.InlineKeyboardButton(text="–†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –∞–¥–º–∏–Ω–æ–≤", callback_data="start_adminbase"))
        board.add(types.InlineKeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–º", callback_data="giveaway"))
        board.add(types.InlineKeyboardButton(text="–ò—Å—Ç–æ—Ä–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π", callback_data="start_history"))
        board.add(types.InlineKeyboardButton(text="–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", callback_data="start_notepad"))
        board.add(types.InlineKeyboardButton(text="‚ùóÔ∏èHELP‚ùóÔ∏èSOS‚ùóÔ∏è", callback_data="start_sos"))
        #board.row(types.InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∫–∞", callback_data="calendar_start"))
        board.adjust(1)
        try:
            con = sqlite3.connect('data/db/giveaway/giveaway.db')
            cur = con.cursor()
            giveaway_link = (cur.execute('SELECT chan_link FROM giveaways_data WHERE giveaway_status = ?', ['active']).fetchone())[0]
            giveaway_name = (cur.execute('SELECT chan_name FROM giveaways_data WHERE giveaway_status = ?', ['active']).fetchone())[0]
            giveaway_msg = (cur.execute('SELECT msg_id FROM giveaways_data WHERE giveaway_status = ?', ['active']).fetchone())[0]
            giveaway_end = (cur.execute('SELECT giveaway_end FROM giveaways_data WHERE giveaway_status = ?', ['active']).fetchone())[0]
            con.close()
            link = (f'{giveaway_link}' + '/' + f'{giveaway_msg}')
            current_date = datetime.today()
            date_obj = datetime.strptime(giveaway_end, "%d.%m.%Y")
            delta = (date_obj - current_date).days
            sent_message = await callback_query.message.edit_text (f'üëãüèª <i>–ü—Ä–∏–≤–µ—Ç, {name}!!! üëãüèª\n–°–µ–π—á–∞—Å –∞–∫—Ç–∏–≤–µ–Ω —Ä–æ–∑—ã–≥—Ä—ã—à –≤ –∫–∞–Ω–∞–ª–µ <a href="{giveaway_link}">{giveaway_name}</a> \n–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å—Ç –º–æ–∂–Ω–æ —Ç—É—Ç üëâüèª<a href="{link}">–ñ–ú–Ø–ö</a>\n–î–æ –∫–æ–Ω—Ü–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –æ—Å—Ç–∞–ª–æ—Å—å <b><u>{delta}</u></b> –¥–Ω–µ–π\n–í—ã–±–∏—Ä–∞–π –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç</i>', parse_mode="HTML", disable_web_page_preview=True, reply_markup=board.as_markup())
            asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))
        except:
            sent_message = await callback_query.message.edit_text(f"üëãüèª <i>–ü—Ä–∏–≤–µ—Ç, {nick}!!! üëãüèª\n–í—ã–±–∏—Ä–∞–π –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç</i>", parse_mode="HTML", reply_markup=board.as_markup())
            asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))
    
    elif data == "start_adminbase":
        con = sqlite3.connect('data/db/role/admin.db')
        cur = con.cursor()
        cur.execute("SELECT * FROM admins")
        rows = cur.fetchall()
        con.close()
        response = "<i>–ê–¥–º–∏–Ω—ã –±–æ—Ç–∞:</i>\n\n"
        for row in rows:
            response += f"{row[0]}) –ò–º—è {row[2]} –ù–∏–∫ @{row[3]}\n"
        board = InlineKeyboardBuilder()
        board.add(types.InlineKeyboardButton(text="‚ûï–î–æ–±–∞–≤–∏—Ç—å‚ûï", callback_data="start_adminbase_plus"))
        board.add(types.InlineKeyboardButton(text="‚ûñ–£–±—Ä–∞—Ç—å‚ûñ", callback_data="start_adminbase_minus"))
        board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
        board.adjust(2, 1)
        sent_message = await callback_query.message.edit_text(response, parse_mode="HTML", reply_markup=board.as_markup())
        asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))


    elif data == "start_adminbase_plus":
        await state.set_state(ADMINS.idtg)
        board = InlineKeyboardBuilder()
        board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
        await callback_query.message.edit_text("<i>–í–≤–æ–¥–∏ ID —Ç–µ–ª–µ–≥—Ä–∞–º–∞ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞\n–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª, –∂–º–∏ –∫–Ω–æ–ø–∫—É –≤—ã—à–µ</i>", parse_mode="HTML", reply_markup=board.as_markup())


    elif data == "role_admin":
        await state.update_data(role="admin")
        user_data = await state.get_data()
        idtg = user_data['idtg']
        role = user_data['role']
        await state.clear()
        con = sqlite3.connect('data/db/role/admin.db')
        cur = con.cursor()
        cur.execute(f'INSERT INTO admins (idtg, role) VALUES ("{idtg}", "{role}")')
        con.commit()
        con.close()
        board = InlineKeyboardBuilder()
        board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
        sent_message = await callback_query.message.edit_text("<i>–ó–∞–ø–∏—Å–∞–ª, –ø—É—Å—Ç—å –Ω–æ–≤—ã–π –∞–¥–º–∏–Ω –Ω–∞–ø–∏—à–µ—Ç /start</i>", parse_mode="HTML", reply_markup=board.as_markup())
        asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))


    elif data == "role_master":
        await state.update_data(role="master")
        user_data = await state.get_data()
        idtg = user_data['idtg']
        role = user_data['role']
        await state.clear()
        con = sqlite3.connect('data/db/role/admin.db')
        cur = con.cursor()
        cur.execute(f'INSERT INTO admins (idtg, role) VALUES ("{idtg}", "{role}")')
        con.commit()
        con.close()
        board = InlineKeyboardBuilder()
        board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
        sent_message = await callback_query.message.edit_text("<i>–ó–∞–ø–∏—Å–∞–ª, –ø—É—Å—Ç—å –Ω–æ–≤—ã–π –∞–¥–º–∏–Ω –Ω–∞–ø–∏—à–µ—Ç /start</i>", parse_mode="HTML", reply_markup=board.as_markup())
        asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))


    elif data == "start_adminbase_minus":
        con = sqlite3.connect('data/db/role/admin.db')
        cur = con.cursor()
        all = cur.execute("SELECT id FROM admins ORDER BY id DESC LIMIT 1")
        all = int((cur.fetchone())[0])
        board = InlineKeyboardBuilder()
        for i in range(1, all+1):
            try:
                nick = cur.execute(f'SELECT nick FROM admins WHERE id = ?', [i]).fetchone()
                idtg = cur.execute(f'SELECT idtg FROM admins WHERE id = ?', [i]).fetchone()
                nick = nick[0]
                idtg = idtg[0]
                board.add(types.InlineKeyboardButton(text=f"{nick}", callback_data=f"adminminus_{idtg}"))
            except:
                pass
        con.close()
        board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–û—Ç–º–µ–Ω–∞‚Ü©Ô∏è", callback_data="ok"))
        board.adjust(1)
        sent_message = await callback_query.message.edit_text("<i>–í—ã–±–µ—Ä–∏ –∞–¥–º–∏–Ω–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞–¥–æ –º–∏–Ω—É—Å–∞–Ω—É—Ç—å\n–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª, –∂–º–∏ –æ—Ç–º–µ–Ω—É</i>", parse_mode="HTML", reply_markup=board.as_markup())
        asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))


    elif data == "start_sos":
        await state.set_state(ADMINS.help)
        board = InlineKeyboardBuilder()
        board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–û—Ç–º–µ–Ω–∞‚Ü©Ô∏è", callback_data="ok"))
        sent_message = await callback_query.message.edit_text("<i>–¢–∏—Ö–æ! –ë–µ–∑ –ø–∞–Ω–∏–∫–∏!\n–í —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –æ–ø–∏—à–∏ –≤ —á–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—Å—è.\n–ù—É –ª–∏–±–æ –∂–º–∏ –æ—Ç–º–µ–Ω—É, –µ—Å–ª–∏ —Å—Ç–µ—Å–Ω—è—à–∫–∞</i>", parse_mode="HTML", reply_markup=board.as_markup())
        asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))


    elif data == "start_notepad":
        con = sqlite3.connect('data/db/notepad/notepad.db')
        cur = con.cursor()
        board = InlineKeyboardBuilder()
        try:
            all = cur.execute("SELECT id FROM note ORDER BY id DESC LIMIT 1")
            all = int((cur.fetchone())[0])
            cur.execute("SELECT * FROM note")
            rows = cur.fetchall()
            for i in range (1, all+1):
                try:
                    text = cur.execute("SELECT text FROM note WHERE id = ?", (i,)).fetchone()
                    text = text[0]
                    board.add(types.InlineKeyboardButton(text=f"{text}", callback_data=f"notepad_{i}"))
                except:
                    pass
            con.close()
        except:
            pass
        con.close()
        board.add(types.InlineKeyboardButton(text="‚ûï–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å‚ûï", callback_data="note_plus"))
        board.add(types.InlineKeyboardButton(text="‚ûñ–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å‚ûñ", callback_data="note_minus"))
        board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–û—Ç–º–µ–Ω–∞‚Ü©Ô∏è", callback_data="ok"))
        board.adjust(*[1] * len(rows), 2, 1)
        sent_message = await callback_query.message.edit_text("<i><b>Firestorm</b> –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –≤—Å–µ–≥–¥–∞.\n–ü–æ—ç—Ç–æ–º—É –Ω–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ—Ç–æ–º–∫–æ–≤.\n–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω</i>", parse_mode="HTML", reply_markup=board.as_markup())
        asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))


    elif data == 'note_plus':
        await state.set_state(ADMINS.text)
        board = InlineKeyboardBuilder()
        board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
        sent_message = await callback_query.message.edit_text("<i>–û–∫–µ–π, —Ç—ã –∑–∞—Ö–æ—Ç–µ–ª –æ—Å—Ç–∞–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ—Ç–æ–º–∫–æ–≤.\n–ë—É–¥–µ–º –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç—Ç–∞–ø–æ–≤:\n1) –î–ª—è –Ω–∞—á–∞–ª–∞ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (–æ–¥–Ω–æ - –¥–≤–∞ —Å–ª–æ–≤–∞)\n2) –ó–∞—Ç–µ–º –º–Ω–µ –Ω–∞–¥–æ –±—É–¥–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç\n3) –î–∞–ª–µ–µ —è –ø–æ–ø—Ä–æ—à—É –≤–≤–µ—Å—Ç–∏ –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –≤ —Å–∏–º–≤–æ–ª–∞—Ö –Ω–µ—Ç)\n\n–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª - –∂–º–∏ –æ—Ç–º–µ–Ω—É\n–ï—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥—É–º–∞–ª - –≤–≤–æ–¥–∏ <b>–∫—Ä–∞—Ç–∫–æ–µ</b> –æ–ø–∏—Å–∞–Ω–∏–µ</i>", parse_mode="HTML", reply_markup=board.as_markup())
        asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))


    elif data == "note_minus":
        await state.set_state(ADMINS.minus)
        con = sqlite3.connect('data/db/notepad/notepad.db')
        cur = con.cursor()
        cur.execute("SELECT * FROM note")
        rows = cur.fetchall()
        con.close()
        result = "<i>–ó–∞–ø–∏—Å–∏ –ø–æ –Ω–æ–º–µ—Ä–∞–º:</i>\n\n"
        for row in rows:
            result += f"<u>{row[0]}) {row[4]}</u>\n"
        board = InlineKeyboardBuilder()
        board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
        sent_message = await callback_query.message.edit_text(f"{result}<i><b>\n–í–≤–æ–¥–∏ –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—É—é –Ω–∞–¥–æ —É–¥–∞–ª–∏—Ç—å. –õ–∏–±–æ –∂–º–∏ –æ—Ç–º–µ–Ω–∞</b></i>", parse_mode="HTML", reply_markup=board.as_markup())
        asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))


    elif data == "giveaway":
        board = InlineKeyboardBuilder()
        board.add(types.InlineKeyboardButton(text="–°—Ç–∞—Ä—Ç –Ω–æ–≤–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞", callback_data="giveaway_start"))
        board.add(types.InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à",  callback_data="giveaway_end"))
        board.add(types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏",  callback_data="giveaway_stop"))
        board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
        board.adjust(1)
        sent_message = await callback_query.message.edit_text(f"<i>–í—ã–±–∏—Ä–∞–π –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç</i>", parse_mode="HTML", reply_markup=board.as_markup())
        asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))


    elif data == "giveaway_start":
        con = sqlite3.connect('data/db/giveaway/chan_data.db')
        cur = con.cursor()
        cur.execute("SELECT * FROM channals")
        rows = cur.fetchall()
        con.close()
        board = InlineKeyboardBuilder()
        try:
            for row in rows:
                board.add(types.InlineKeyboardButton(text=f"{row[2]}", callback_data=f"start_giveaway:{row[1]}"))
            board.add(types.InlineKeyboardButton(text="‚ûï–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª‚ûï", callback_data="channal_plus"))
            board.add(types.InlineKeyboardButton(text="‚ûñ–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª‚ûñ", callback_data="channal_minus"))
            board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
            board.adjust(*[1] * len(rows), 2, 1)
            sent_message = await callback_query.message.edit_text(f"<i>–í—ã–±–∏—Ä–∞–π –∫–∞–Ω–∞–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞</i>", parse_mode="HTML", reply_markup=board.as_markup())
            asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))

        except:
            board.add(types.InlineKeyboardButton(text="‚ûï–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª‚ûï", callback_data="channal_plus"))
            board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
            board.adjust(*[1] * len(rows), 1, 1)
            sent_message = await callback_query.message.edit_text(f"<i>–í—ã–±–∏—Ä–∞–π –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç</i>", parse_mode="HTML", reply_markup=board.as_markup())
            asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))


    elif data == "channal_plus":
        await state.set_state(CHAN.name_chan)
        board = InlineKeyboardBuilder()
        board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
        sent_message = await callback_query.message.edit_text("<i>–í–≤–æ–¥–∏ <b>–∏–º—è</b> –∫–∞–Ω–∞–ª–∞</i>", parse_mode="HTML", reply_markup=board.as_markup())
        asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))


    elif data == "channal_minus":
        con = sqlite3.connect('data/db/giveaway/chan_data.db')
        cur = con.cursor()
        cur.execute("SELECT * FROM channals")
        rows = cur.fetchall()
        con.close()
        board = InlineKeyboardBuilder()
        try:
            for row in rows:
                board.add(types.InlineKeyboardButton(text=f"{row[2]}", callback_data=f"chan_minus:{row[0]}"))
            board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
            board.adjust(1)
            sent_message = await callback_query.message.edit_text(f"<i>–í—ã–±–∏—Ä–∞–π –∫–∞–Ω–∞–ª –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–¥–æ <b><u>–£–î–ê–õ–ò–¢–¨</u></b></i>", parse_mode="HTML", reply_markup=board.as_markup())
            asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))
        except:
            board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
            board.adjust(1)
            sent_message = await callback_query.message.edit_text(f"<i>–í—Å–µ –∫–∞–Ω–∞–ª—ã —É–¥–∞–ª–µ–Ω—ã</i>", parse_mode="HTML", reply_markup=board.as_markup())
            asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))


    elif data == "post_ok":
        giveaway_data = await state.get_data()
        admin_nick = callback_query.from_user.username
        chan_id = int(giveaway_data['chan_id'])
        chan_link = giveaway_data['link']
        chan_name = giveaway_data['name']
        await state.clear()
        jpg_post = FSInputFile("data/variables/post/start_post.jpg")
        with open('data/variables/post/start_post.txt', "r", encoding="utf-8") as f:
            text_post = f.read()
        con = sqlite3.connect('data/db/giveaway/giveaway.db')
        cur = con.cursor()
        board = InlineKeyboardBuilder()
        board.add(types.InlineKeyboardButton(text=f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", url='https://t.me/Charcon_bot'))
        msg = await bot.send_photo(chat_id=chan_id, photo=jpg_post, caption=text_post, parse_mode="HTML", reply_markup=board.as_markup())
        msg_id = msg.message_id
        con = sqlite3.connect('data/db/giveaway/giveaway.db')
        cur = con.cursor()
        cur.execute(f'INSERT INTO giveaways_data (admin_start, chan_name, chan_id, chan_link, msg_id, giveaway_status) VALUES ("{admin_nick}", "{chan_name}", "{chan_id}", "{chan_link}", "{msg_id}", "active")')
        con.commit()
        con.close()
        board = InlineKeyboardBuilder()
        board.add(types.InlineKeyboardButton(text="üìÜ–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—åüìÜ", callback_data="calendar_start"))
        sent_message = await callback_query.message.edit_text("<i>–ü–æ—Å—Ç —É–ª–µ—Ç–µ–ª, –æ—Å—Ç–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞\n–ñ–º–∏ –∫–Ω–æ–ø–∫—É</i>", parse_mode="HTML", reply_markup=board.as_markup())
        asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))


    elif data == 'calendar_start':
        con = sqlite3.connect('data/db/giveaway/giveaway.db')
        cur = con.cursor()
        giveaway_end = (cur.execute('SELECT giveaway_end FROM giveaways_data WHERE giveaway_status = ?', ['active']).fetchone())[0]
        con.close()
        current_date = datetime.today()
        date_obj = datetime.strptime(giveaway_end, "%d.%m.%Y")
        delta = (date_obj - current_date).days
        print (delta)


# –ì–æ—Ç–æ–≤–∏–º –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞
@dp.message(GIVEAWAY.post)
async def giveaway_post(message: Message, state: FSMContext):
    if message.caption:
        photo = message.photo[-1]  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ —Å —Å–∞–º—ã–º –≤—ã—Å–æ–∫–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
        file_id = photo.file_id
        file = await bot.get_file(file_id)
        file_path = file.file_path
        download_path = os.path.join('data/variables/post', "start_post.jpg")
        await bot.download_file(file_path, destination=download_path)

        description = message.html_text
        description_path = os.path.join('data/variables/post', "start_post.txt")
        with open(description_path, "w", encoding="utf-8") as f:
            f.write(description)
        with open(description_path, "r", encoding="utf-8") as f:
            text_post = f.read()
        jpg_post = FSInputFile("data/variables/post/start_post.jpg")

        board = InlineKeyboardBuilder()
        board.add(types.InlineKeyboardButton(text="‚úÖ–û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="post_ok"))
        board.add(types.InlineKeyboardButton(text="‚ùå–ü–µ—Ä–µ–¥–µ–ª–∞—Ç—å", callback_data="giveaway_start"))
        board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
        board.adjust(2, 1)
        sent_message = await bot.send_photo(message.from_user.id, photo=jpg_post, caption=f"{text_post}", parse_mode="HTML")
        asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))

        sent_message = await message.answer("<i>üëÜüëÜüëÜüëÜüëÜüëÜüëÜ\n\n–í–æ—Ç —Ç–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–≤–æ–π –ø–æ—Å—Ç.\n–ï—Å–ª–∏ –≤—Å—ë —Ö–æ—Ä–æ—à–æ - –∂–º–∏ <b>–û—Ç–ø—Ä–∞–≤–∏—Ç—å</b> –∏ –ø–æ—Å—Ç –ø–æ–ª–µ—Ç–∏—Ç –≤ –∫–∞–Ω–∞–ª</i>", parse_mode="HTML", reply_markup=board.as_markup())
        asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))

# –í–Ω–æ—Å–∏–º –∫–∞–Ω–∞–ª –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
@dp.message(CHAN.name_chan)
async def name_chan(message: Message, state: FSMContext):
    await state.update_data(name_chan=message.text)
    sent_message = await message.answer("<i>–¢–µ–ø–µ—Ä—å –º–Ω–µ –Ω–∞–¥–æ <b>ID –∫–∞–Ω–∞–ª–∞</b>\nID –∫–∞–Ω–∞–ª–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —Ü–∏—Ñ—Ä, —É–∑–Ω–∞—Ç—å –µ–≥–æ –º–æ–∂–Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, —É @LeadConverterToolkitBot</i>", parse_mode="HTML")
    asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))
    await state.set_state(CHAN.id_chan)
@dp.message(CHAN.id_chan)
async def id_chan(message: Message, state: FSMContext):
    await state.update_data(id_chan=message.text)
    sent_message = await message.answer("<i>–û—Ç–ª–∏—á–Ω–æ, –æ—Å—Ç–∞–ª–æ—Å—å –≤–Ω–µ—Å—Ç–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª\n–ñ–¥—É</i>", parse_mode="HTML")
    asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))
    await state.set_state(CHAN.link_chan)
@dp.message(CHAN.link_chan)
async def link_chan(message: Message, state: FSMContext):
    await state.update_data(link_chan=message.text)
    chan_data = await state.get_data()
    name = chan_data['name_chan']
    id_chan = chan_data['id_chan']
    link = chan_data['link_chan']
    await state.clear()
    con = sqlite3.connect('data/db/giveaway/chan_data.db')
    cur = con.cursor()
    cur.execute(f'INSERT INTO channals (id_chan, name, link) VALUES ("{id_chan}", "{name}", "{link}")')
    con.commit()
    con.close()
    con = sqlite3.connect('data/db/giveaway/chan_data.db')
    cur = con.cursor()
    cur.execute("SELECT * FROM channals")
    rows = cur.fetchall()
    con.close()
    board = InlineKeyboardBuilder()
    try:
        for row in rows:
            board.add(types.InlineKeyboardButton(text=f"{row[2]}", callback_data=f"giveaway:{row[0]}"))
        board.add(types.InlineKeyboardButton(text="‚ûï–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª‚ûï", callback_data="channal_plus"))
        board.add(types.InlineKeyboardButton(text="‚ûñ–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª‚ûñ", callback_data="channal_minus"))
        board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
        board.adjust(*[1] * len(rows), 2, 1)
        sent_message = await message.answer(f"<i>–í—ã–±–∏—Ä–∞–π –∫–∞–Ω–∞–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞</i>", parse_mode="HTML", reply_markup=board.as_markup())
        asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))
    except:
        board.add(types.InlineKeyboardButton(text="‚ûï–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª‚ûï", callback_data="channal_plus"))
        board.add(types.InlineKeyboardButton(text="‚ûñ–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª‚ûñ", callback_data="channal_minus"))
        board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
        board.adjust(*[1] * len(rows), 2, 1)
        sent_message = await message.answer(f"<i>–í—ã–±–∏—Ä–∞–π –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç</i>", parse_mode="HTML", reply_markup=board.as_markup())
        asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))


# –ò–Ω—Å—Ç—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ—Ç–æ–º–∫–æ–≤
@dp.message(ADMINS.text)
async def note_text(message: Message, state: FSMContext):
    await state.update_data(text=message.text)
    sent_message = await message.answer("<i>–¢–µ–ø–µ—Ä—å –¥–∞–π —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç</i>", parse_mode="HTML")
    asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))
    await state.set_state(ADMINS.link)
@dp.message(ADMINS.link)
async def note_link(message: Message, state: FSMContext):
    await state.update_data(link=message.text)
    sent_message = await message.answer("<i>–û—Å—Ç–∞–ª–æ—Å—å –æ–ø–∏—Å–∞—Ç—å, —á—Ç–æ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å —Å –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ —Å–∞–π—Ç–∞</i>", parse_mode="HTML")
    asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))
    await state.set_state(ADMINS.desc)
@dp.message(ADMINS.desc)
async def note_link(message: Message, state: FSMContext):
    await state.update_data(desc=message.text)
    note_data = await state.get_data()
    admin_nick = message.from_user.username
    link = note_data['link']
    desc = note_data['desc']
    text = note_data['text']
    await state.clear()
    con = sqlite3.connect('data/db/notepad/notepad.db')
    cur = con.cursor()
    cur.execute(f'INSERT INTO note (admin_nick, link, desc, text) VALUES ("{admin_nick}", "{link}", "{desc}", "{text}")')
    con.commit()
    cur.close()
    con.close()
    con = sqlite3.connect('data/db/notepad/notepad.db')
    cur = con.cursor()
    all = cur.execute("SELECT id FROM note ORDER BY id DESC LIMIT 1")
    all = int((cur.fetchone())[0])
    cur.execute("SELECT * FROM note")
    rows = cur.fetchall()
    board = InlineKeyboardBuilder()
    for i in range (1, all+1):
        try:
            text = cur.execute("SELECT text FROM note WHERE id = ?", (i,)).fetchone()
            text = text[0]
            board.add(types.InlineKeyboardButton(text=f"{text}", callback_data=f"notepad_{i}"))
        except:
            pass
    con.close()
    board.add(types.InlineKeyboardButton(text="‚ûï–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å‚ûï", callback_data="note_plus"))
    board.add(types.InlineKeyboardButton(text="‚ûñ–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å‚ûñ", callback_data="note_minus"))
    board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–û—Ç–º–µ–Ω–∞‚Ü©Ô∏è", callback_data="ok"))
    board.adjust(*[1] * len(rows), 2, 1)
    sent_message = await message.answer("<i><b>Firestorm</b> –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –≤—Å–µ–≥–¥–∞.\n–ü–æ—ç—Ç–æ–º—É –Ω–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ—Ç–æ–º–∫–æ–≤.\n–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω</i>", parse_mode="HTML", reply_markup=board.as_markup())
    asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))


@dp.message(ADMINS.minus)                     
async def note_minus(message: Message, state: FSMContext):
    await state.update_data(note_minus=message.html_text)
    note_data = await state.get_data()
    number = note_data['note_minus']
    await state.clear()
    con = sqlite3.connect('data/db/notepad/notepad.db')
    cur = con.cursor()
    cur.execute("DELETE FROM note WHERE id = ?", (number,))    
    con.commit()
    con.close()
    con = sqlite3.connect('data/db/notepad/notepad.db')
    cur = con.cursor()
    all = cur.execute("SELECT id FROM note ORDER BY id DESC LIMIT 1")
    all = int((cur.fetchone())[0])
    board = InlineKeyboardBuilder()
    cur.execute("SELECT * FROM note")
    rows = cur.fetchall()
    for i in range (1, all+1):
        try:
            text = cur.execute("SELECT text FROM note WHERE id = ?", (i,)).fetchone()
            text = text[0]
            board.add(types.InlineKeyboardButton(text=f"{text}", callback_data=f"notepad_{i}"))
        except:
            pass
    con.close()
    board.add(types.InlineKeyboardButton(text="‚ûï–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å‚ûï", callback_data="note_plus"))
    board.add(types.InlineKeyboardButton(text="‚ûñ–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å‚ûñ", callback_data="note_minus"))
    board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–û—Ç–º–µ–Ω–∞‚Ü©Ô∏è", callback_data="ok"))
    board.adjust(*[1] * len(rows), 2, 1)
    sent_message = await message.answer("<i><b>Firestorm</b> –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –≤—Å–µ–≥–¥–∞.\n–ü–æ—ç—Ç–æ–º—É –Ω–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ—Ç–æ–º–∫–æ–≤.\n–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω</i>", parse_mode="HTML", reply_markup=board.as_markup())
    asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))


# SOS –∞–¥–º–∏–Ω—É
@dp.message(ADMINS.help)
async def admin_plus(message: Message, state: FSMContext):
    await state.update_data(help=message.html_text)
    nick = message.from_user.username
    user_data = await state.get_data()
    with open("data/variables/text/SOS.txt", "w", encoding="utf-8") as file:
        file.write(f"<b>–ê–¥–º–∏–Ω:</b> @{nick}\n")
        file.write(f"<b>–ü—Ä–æ–±–ª–µ–º–∞:</b> {user_data['help']}\n")
    with open("data/variables/text/SOS.txt", "r", encoding="utf-8") as file:
        text_sos = file.read()
        try:
            await bot.send_message(chat_id=master_id, text=text_sos, parse_mode="HTML")
            board = InlineKeyboardBuilder()
            board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
            sent_message = await message.answer("<i>üòÇ–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ, –æ–∂–∏–¥–∞–π—Ç–µüòÇ</i>", parse_mode="HTML", reply_markup=board.as_markup())
            asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))

        except:
            board = InlineKeyboardBuilder()
            board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
            sent_message = await message.answer("<i>üòÇ–ß–æ—Ç —Ö–æ–∑—è–∏–Ω –ø–æ—Ç–µ—Ä—è–ª—Å—è\n–¢–∞–∫ —á—Ç–æ –µ—Å–ª–∏ –∫–∞–∫–∏–µ-—Ç–æ –ø—Ä–æ–±–ª–µ–º—ã - —Ä–µ—à–∞–πüòÇ</i>", parse_mode="HTML", reply_markup=board.as_markup())
            asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –≤ –ë–î
@dp.message(ADMINS.idtg)
async def admin_plus(message: Message, state: FSMContext):
    await state.update_data(idtg=message.text)
    board = InlineKeyboardBuilder()
    board.add(types.InlineKeyboardButton(text="admin", callback_data="role_admin"))
    board.add(types.InlineKeyboardButton(text="master", callback_data="role_master"))
    sent_message = await message.answer("<i>–í—ã–±–µ—Ä–∏ —Ä–æ–ª—å</i>", parse_mode="HTML", reply_markup=board.as_markup())
    asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))


# –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
def get_sorted_items(path: str):
    items = os.listdir(path)
    items_with_time = [(item, os.path.getctime(os.path.join(path, item))) for item in items]
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
    items_with_time.sort(key=lambda x: x[1], reverse=True)
    return [item[0] for item in items_with_time]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
async def list_directory(message: types.Message, path: str):
    items = get_sorted_items(HISTORY_DIR)
    board = InlineKeyboardBuilder()
    files = items
    for file in files:
        button_text = file.split(" ", 1)[1]
        button_text = button_text.split(".", 1)[0]
        board.add(types.InlineKeyboardButton(text=button_text, callback_data=f"winners:{file}"))
    board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
    board.adjust(*[3] * len(files), 1)
    sent_message = await message.edit_text("<i>–ö–æ–≥–¥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏–ª—Å—è —Ä–æ–∑—ã–≥—Ä—ã—à?\n–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è</i>", parse_mode="HTML", reply_markup=board.as_markup())
    asyncio.create_task(delete_message_after_delay(sent_message.chat.id, sent_message.message_id))


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω/—é–∑–µ—Ä
def is_user_admin(user_id: int):
    con = sqlite3.connect('data/db/role/admin.db')
    cur = con.cursor()
    cur.execute("SELECT * FROM admins WHERE idtg = ?", (user_id,))
    user = cur.fetchone()
    con.close()
    return user is not None

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –≤ –ë–î
def role_in_db(user_id: str):
    con = sqlite3.connect('data/db/role/admin.db')
    cur = con.cursor()
    cur.execute('SELECT role FROM admins WHERE idtg = ?', [user_id])
    result = cur.fetchone()
    cur.close()
    con.close()
    return result[0] if result else None

# –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏
async def delete_message_after_delay(chat_id: int, message_id: int, delay: int = 300):
    await asyncio.sleep(delay)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    await bot.delete_message(chat_id, message_id)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())