#        random_sticker = random.choice(stickers_hi)
#        await bot.send_sticker(message.chat.id, random_sticker)
#       900865796
# —Å–æ–∑–¥–∞—Ç—å pip freeze > requirements.txt
# —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å pip install -r requirements.txt



import sqlite3
import datetime
import os
import asyncio
import random

import logging

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message


from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import CallbackQuery

from aiogram.types.input_file import FSInputFile

from config import *
from stikers import *

bot = Bot(token=TOKEN)
dp = Dispatcher()

HISTORY_DIR = "data/history"
logging.basicConfig(level=logging.INFO)

logging.basicConfig(level=logging.INFO, filename='data/variables/log.txt', format='%(asctime)s - %(message)s')

class ADMINS(StatesGroup):
    idtg = State()
    role = State()
    delete = State()
    help = State()
    text = State()
    link = State()
    desc = State()
    minus = State()

# –°–æ–∑–¥–∞–µ–º –ë–î –∞–¥–º–∏–Ω–æ–≤
con = sqlite3.connect('data/db/role/admin.db')
cur = con.cursor()
cur.execute('''
    CREATE TABLE IF NOT EXISTS admins(
            id INTEGER PRIMARY KEY AUTOINCREMENT, 
            idtg VARCHAR (20), 
            name VARCHAR (40), 
            nick VARCHAR (40),
            role VARCHAR (20)
            )''')
con.commit()
cur.close()
con.close()

# –°–æ–∑–¥–∞–µ–º –ë–î –∑–∞–ø–∏—Å–æ–∫
con = sqlite3.connect('data/db/notepad/notepad.db')
cur = con.cursor()
cur.execute('''
    CREATE TABLE IF NOT EXISTS note(
            id INTEGER PRIMARY KEY AUTOINCREMENT, 
            admin_nick VARCHAR (20), 
            link VARCHAR (800), 
            desc VARCHAR (400),
            text VARCHAR (20)
            )''')
con.commit()
cur.close()
con.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start(message: types.Message):
    user_id = message.from_user.id
    name = message.chat.first_name
    nick = message.from_user.username
    
    if is_user_admin(user_id):
        role = role_in_db(user_id)
        board = InlineKeyboardBuilder()
        con = sqlite3.connect('data/db/role/admin.db')
        cur = con.cursor()
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –∏ –Ω–∏–∫ –∞–¥–º–∏–Ω–∞
        cur.execute(f'UPDATE admins SET name = ? wHERE idtg = {user_id} ', [name])
        cur.execute(f'UPDATE admins SET nick = ? wHERE idtg = {user_id}', [nick])
        con.commit()
        con.close()
        
        if role == 'master':
            board.add(types.InlineKeyboardButton(text="–†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –∞–¥–º–∏–Ω–æ–≤", callback_data="start_adminbase"))
        board.add(types.InlineKeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–º", callback_data="start_giveaway"))
        board.add(types.InlineKeyboardButton(text="–ò—Å—Ç–æ—Ä–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π", callback_data="start_history"))
        board.add(types.InlineKeyboardButton(text="–ó–∞–ø–∏—Å–Ω–∞—è –∫–Ω–∏–∂–∫–∞", callback_data="start_notepad"))
        board.add(types.InlineKeyboardButton(text="‚ùóÔ∏èHELP‚ùóÔ∏èSOS‚ùóÔ∏è", callback_data="start_sos"))
        board.adjust(1)
        await message.answer (f"üëãüèª <i>–ü—Ä–∏–≤–µ—Ç, {name}!!! üëãüèª\n–í—ã–±–∏—Ä–∞–π –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç</i>", parse_mode="HTML", reply_markup=board.as_markup())
    else:
        await message.answer (f"üëãüèª –ü—Ä–∏–≤–µ—Ç, {name}!!! üëãüèª\n–¢—ã –Ω–µ –∞–¥–º–∏–Ω –∏ —Ç–µ–±–µ —Ç—É—Ç –¥–µ–ª–∞—Ç—å –Ω–µ—á–µ–≥–æ", parse_mode="HTML")

@dp.callback_query(lambda c: c.data == "start_history")
async def process_browser(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await list_directory(callback_query.message, HISTORY_DIR)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
@dp.callback_query(lambda c: c.data.startswith("adminminus_"))
async def adminminus(callback_query: types.CallbackQuery):
    await callback_query.answer()
    admin_id = callback_query.data.split("_", 1)[1]
    try:
        con = sqlite3.connect('data/db/role/admin.db')
        cur = con.cursor()
        cur.execute("DELETE FROM admins WHERE idtg = ?", (admin_id,))
        con.commit()
        con.close()
        con = sqlite3.connect('data/db/role/admin.db')
        cur = con.cursor()
        all = cur.execute("SELECT id FROM admins ORDER BY id DESC LIMIT 1")
        all = int((cur.fetchone())[0])
        board = InlineKeyboardBuilder()
        for i in range(1, all+1):
            try:
                nick = cur.execute(f'SELECT nick FROM admins WHERE id = ?', [i]).fetchone()
                idtg = cur.execute(f'SELECT idtg FROM admins WHERE id = ?', [i]).fetchone()
                nick = nick[0]
                idtg = idtg[0]
                board.add(types.InlineKeyboardButton(text=f"{nick}", callback_data=f"adminminus_{idtg}"))
            except:
                pass
        board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–û—Ç–º–µ–Ω–∞‚Ü©Ô∏è", callback_data="ok"))
        board.adjust(1)
        await callback_query.message.edit_text("<i>–ê–¥–º–∏–Ω —É–¥–∞–ª–µ–Ω</i>", parse_mode="HTML", reply_markup=board.as_markup())
    except:
        board = InlineKeyboardBuilder()
        board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
        board.adjust(1)
        await callback_query.message.edit_text("<i>–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞</i>", parse_mode="HTML", reply_markup=board.as_markup())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —á—Ç–µ–Ω–∏—è –±–∞–∑—ã –≤–∏–Ω–Ω–µ—Ä–æ–≤
@dp.callback_query(lambda c: c.data.startswith("winners:"))
async def winners(callback_query: types.CallbackQuery):
    await callback_query.answer()
    file_path = callback_query.data.split(":", 1)[1]
    file_path = f"{HISTORY_DIR}" + "/" + f"{file_path}"
    with open (file_path, 'r', encoding="utf-8") as file:
        winner_text = file.read()
    items = get_sorted_items(HISTORY_DIR)
    board = InlineKeyboardBuilder()
    files = items
    for file in files:
        button_text = file.split(" ", 1)[1]
        button_text = button_text.split(".", 1)[0]
        board.add(types.InlineKeyboardButton(text=button_text, callback_data=f"winners:{file}"))
    board.adjust(3)
    board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
    await callback_query.message.edit_text(f"{winner_text}\n--------------------\n<i>–ö–æ–≥–¥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏–ª—Å—è —Ä–æ–∑—ã–≥—Ä—ã—à?\n–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è</i>", parse_mode="HTML", reply_markup=board.as_markup())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —á—Ç–µ–Ω–∏—è –∑–∞–ø–∏—Å–Ω–æ–π –∫–Ω–∏–∂–∫–∏
@dp.callback_query(lambda c: c.data.startswith("notepad_"))
async def note_read(callback_query: types.CallbackQuery):
    await callback_query.answer()
    i = callback_query.data.split("_", 1)[1]
    con = sqlite3.connect('data/db/notepad/notepad.db')
    cur = con.cursor()
    nick = (cur.execute('SELECT admin_nick FROM note WHERE id = ?', [i]).fetchone())[0]
    link = (cur.execute('SELECT link FROM note WHERE id = ?', [i]).fetchone())[0]
    desc = (cur.execute('SELECT desc FROM note WHERE id = ?', [i]).fetchone())[0]
    text_base = (cur.execute('SELECT text FROM note WHERE id = ?', [i]).fetchone())[0]
    con.close()
    board = InlineKeyboardBuilder()
    con = sqlite3.connect('data/db/notepad/notepad.db')
    cur = con.cursor()
    try:
        all = cur.execute("SELECT id FROM note ORDER BY id DESC LIMIT 1")
        all = int((cur.fetchone())[0])
        for i in range (1, all+1):
            try:
                text = cur.execute("SELECT text FROM note WHERE id = ?", (i,)).fetchone()
                text = text[0]
                board.add(types.InlineKeyboardButton(text=f"{text}", callback_data=f"notepad_{i}"))
            except:
                pass
    except:
        pass
    con.close()
    board.add(types.InlineKeyboardButton(text="‚ûï–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å‚ûï", callback_data="note_pad_plus"))
    board.add(types.InlineKeyboardButton(text="‚ûñ–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å‚ûñ", callback_data="notepad_minus"))
    board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–û—Ç–º–µ–Ω–∞‚Ü©Ô∏è", callback_data="ok"))
    board.adjust(1)
    await callback_query.message.edit_text(f"<i>{text_base}\n{link}\n{desc}\n –î–æ–±–∞–≤–∏–ª <b>@{nick}</b></i>", parse_mode="HTML", disable_web_page_preview=True, reply_markup=board.as_markup())

# –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@dp.callback_query()
async def process_callback(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    role = role_in_db(user_id)
    callback_data = callback_query.data
    nick = callback_query.from_user.username
    logging.info(f"–Æ–∑–µ—Ä {nick} –∑–∞–ø—Ä–æ—Å: {callback_data}")
    data = callback_query.data
    await callback_query.answer()

    if data == "ok":
        await state.clear()
        board = InlineKeyboardBuilder()
        if role  == 'master':
            board.add(types.InlineKeyboardButton(text="–†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –∞–¥–º–∏–Ω–æ–≤", callback_data="start_adminbase"))
        board.add(types.InlineKeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–º", callback_data="start_giveaway"))
        board.add(types.InlineKeyboardButton(text="–ò—Å—Ç–æ—Ä–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π", callback_data="start_history"))
        board.add(types.InlineKeyboardButton(text="–ó–∞–ø–∏—Å–Ω–∞—è –∫–Ω–∏–∂–∫–∞", callback_data="start_notepad"))
        board.add(types.InlineKeyboardButton(text="‚ùóÔ∏èHELP‚ùóÔ∏èSOS‚ùóÔ∏è", callback_data="start_sos"))
        board.adjust(1)
        await callback_query.message.edit_text(f"üëãüèª <i>–ü—Ä–∏–≤–µ—Ç, {nick}!!! üëãüèª\n–í—ã–±–∏—Ä–∞–π –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç</i>", parse_mode="HTML", reply_markup=board.as_markup())
    
    elif data == "start_adminbase":
        con = sqlite3.connect('data/db/role/admin.db')
        cur = con.cursor()
        cur.execute("SELECT * FROM admins")
        rows = cur.fetchall()
        con.close()
        response = "<i>–ê–¥–º–∏–Ω—ã –±–æ—Ç–∞:</i>\n\n"
        for row in rows:
            response += f"{row[0]}) –ò–º—è {row[2]} –ù–∏–∫ @{row[3]}\n"
        board = InlineKeyboardBuilder()
        board.add(types.InlineKeyboardButton(text="‚ûï–î–æ–±–∞–≤–∏—Ç—å‚ûï", callback_data="start_adminbase_plus"))
        board.add(types.InlineKeyboardButton(text="‚ûñ–£–±—Ä–∞—Ç—å‚ûñ", callback_data="start_adminbase_minus"))
        board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
        board.adjust(2, 1)
        await callback_query.message.edit_text(response, parse_mode="HTML", reply_markup=board.as_markup())

    elif data == "start_adminbase_plus":
        await state.set_state(ADMINS.idtg)
        board = InlineKeyboardBuilder()
        board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
        await callback_query.message.edit_text("<i>–í–≤–æ–¥–∏ ID —Ç–µ–ª–µ–≥—Ä–∞–º–∞ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞\n–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª, –∂–º–∏ –∫–Ω–æ–ø–∫—É –≤—ã—à–µ</i>", parse_mode="HTML", reply_markup=board.as_markup())

    elif data == "role_admin":
        await state.update_data(role="admin")
        user_data = await state.get_data()
        idtg = user_data['idtg']
        role = user_data['role']
        await state.clear()
        con = sqlite3.connect('data/db/role/admin.db')
        cur = con.cursor()
        cur.execute(f'INSERT INTO admins (idtg, role) VALUES ("{idtg}", "{role}")')
        con.commit()
        con.close()
        board = InlineKeyboardBuilder()
        board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
        await callback_query.message.edit_text("<i>–ó–∞–ø–∏—Å–∞–ª, –ø—É—Å—Ç—å –Ω–æ–≤—ã–π –∞–¥–º–∏–Ω –Ω–∞–ø–∏—à–µ—Ç /start</i>", parse_mode="HTML", reply_markup=board.as_markup())

    elif data == "role_master":
        await state.update_data(role="master")
        user_data = await state.get_data()
        idtg = user_data['idtg']
        role = user_data['role']
        await state.clear()
        con = sqlite3.connect('data/db/role/admin.db')
        cur = con.cursor()
        cur.execute(f'INSERT INTO admins (idtg, role) VALUES ("{idtg}", "{role}")')
        con.commit()
        con.close()
        board = InlineKeyboardBuilder()
        board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
        await callback_query.message.edit_text("<i>–ó–∞–ø–∏—Å–∞–ª, –ø—É—Å—Ç—å –Ω–æ–≤—ã–π –∞–¥–º–∏–Ω –Ω–∞–ø–∏—à–µ—Ç /start</i>", parse_mode="HTML", reply_markup=board.as_markup())

    elif data == "start_adminbase_minus":
        con = sqlite3.connect('data/db/role/admin.db')
        cur = con.cursor()
        all = cur.execute("SELECT id FROM admins ORDER BY id DESC LIMIT 1")
        all = int((cur.fetchone())[0])
        board = InlineKeyboardBuilder()
        for i in range(1, all+1):
            try:
                nick = cur.execute(f'SELECT nick FROM admins WHERE id = ?', [i]).fetchone()
                idtg = cur.execute(f'SELECT idtg FROM admins WHERE id = ?', [i]).fetchone()
                nick = nick[0]
                idtg = idtg[0]
                board.add(types.InlineKeyboardButton(text=f"{nick}", callback_data=f"adminminus_{idtg}"))
            except:
                pass
        con.close()
        board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–û—Ç–º–µ–Ω–∞‚Ü©Ô∏è", callback_data="ok"))
        board.adjust(1)
        await callback_query.message.edit_text("<i>–í—ã–±–µ—Ä–∏ –∞–¥–º–∏–Ω–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞–¥–æ –º–∏–Ω—É—Å–∞–Ω—É—Ç—å\n–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª, –∂–º–∏ –æ—Ç–º–µ–Ω—É</i>", parse_mode="HTML", reply_markup=board.as_markup())

    elif data == "start_sos":
        await state.set_state(ADMINS.help)
        board = InlineKeyboardBuilder()
        board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–û—Ç–º–µ–Ω–∞‚Ü©Ô∏è", callback_data="ok"))
        await callback_query.message.edit_text("<i>–¢–∏—Ö–æ! –ë–µ–∑ –ø–∞–Ω–∏–∫–∏!\n–í —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –æ–ø–∏—à–∏ –≤ —á–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—Å—è.\n–ù—É –ª–∏–±–æ –∂–º–∏ –æ—Ç–º–µ–Ω—É, –µ—Å–ª–∏ —Å—Ç–µ—Å–Ω—è—à–∫–∞</i>", parse_mode="HTML", reply_markup=board.as_markup())

    elif data == "start_notepad":
        con = sqlite3.connect('data/db/notepad/notepad.db')
        cur = con.cursor()
        board = InlineKeyboardBuilder()
        try:
            all = cur.execute("SELECT id FROM note ORDER BY id DESC LIMIT 1")
            all = int((cur.fetchone())[0])
            for i in range (1, all+1):
                try:
                    text = cur.execute("SELECT text FROM note WHERE id = ?", (i,)).fetchone()
                    text = text[0]
                    board.add(types.InlineKeyboardButton(text=f"{text}", callback_data=f"notepad_{i}"))
                except:
                    pass
            con.close()
        except:
            pass
        con.close()
        board.add(types.InlineKeyboardButton(text="‚ûï–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å‚ûï", callback_data="note_plus"))
        board.add(types.InlineKeyboardButton(text="‚ûñ–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å‚ûñ", callback_data="note_minus"))
        board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–û—Ç–º–µ–Ω–∞‚Ü©Ô∏è", callback_data="ok"))
        board.adjust(1)
        await callback_query.message.edit_text("<i><b>Firestorm</b> –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –≤—Å–µ–≥–¥–∞.\n–ü–æ—ç—Ç–æ–º—É –Ω–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ—Ç–æ–º–∫–æ–≤.\n–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω</i>", parse_mode="HTML", reply_markup=board.as_markup())

    elif data == 'note_plus':
        await state.set_state(ADMINS.text)
        board = InlineKeyboardBuilder()
        board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
        await callback_query.message.edit_text("<i>–û–∫–µ–π, —Ç—ã –∑–∞—Ö–æ—Ç–µ–ª –æ—Å—Ç–∞–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ—Ç–æ–º–∫–æ–≤.\n–ë—É–¥–µ–º –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç—Ç–∞–ø–æ–≤:\n1) –î–ª—è –Ω–∞—á–∞–ª–∞ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (–æ–¥–Ω–æ - –¥–≤–∞ —Å–ª–æ–≤–∞)\n2) –ó–∞—Ç–µ–º –º–Ω–µ –Ω–∞–¥–æ –±—É–¥–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç\n3) –î–∞–ª–µ–µ —è –ø–æ–ø—Ä–æ—à—É –≤–≤–µ—Å—Ç–∏ –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –≤ —Å–∏–º–≤–æ–ª–∞—Ö –Ω–µ—Ç)\n\n–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª - –∂–º–∏ –æ—Ç–º–µ–Ω—É\n–ï—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥—É–º–∞–ª - –≤–≤–æ–¥–∏ <b>–∫—Ä–∞—Ç–∫–æ–µ</b> –æ–ø–∏—Å–∞–Ω–∏–µ</i>", parse_mode="HTML", reply_markup=board.as_markup())

    elif data == "note_minus":
        await state.set_state(ADMINS.minus)
        con = sqlite3.connect('data/db/notepad/notepad.db')
        cur = con.cursor()
        cur.execute("SELECT * FROM note")
        rows = cur.fetchall()
        con.close()
        result = "<i>–ó–∞–ø–∏—Å–∏ –ø–æ –Ω–æ–º–µ—Ä–∞–º:</i>\n\n"
        for row in rows:
            result += f"<u>{row[0]}) {row[4]}</u>\n"
        board = InlineKeyboardBuilder()
        board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
        await callback_query.message.edit_text(f"{result}<i><b>\n–í–≤–æ–¥–∏ –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—É—é –Ω–∞–¥–æ —É–¥–∞–ª–∏—Ç—å. –õ–∏–±–æ –∂–º–∏ –æ—Ç–º–µ–Ω–∞</b></i>", parse_mode="HTML", reply_markup=board.as_markup())

# –ò–Ω—Å—Ç—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ—Ç–æ–º–∫–æ–≤
@dp.message(ADMINS.text)
async def note_text(message: Message, state: FSMContext):
    await state.update_data(text=message.text)
    await message.answer("<i>–¢–µ–ø–µ—Ä—å –¥–∞–π —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç</i>", parse_mode="HTML")
    await state.set_state(ADMINS.link)
@dp.message(ADMINS.link)
async def note_link(message: Message, state: FSMContext):
    await state.update_data(link=message.text)
    await message.answer("<i>–û—Å—Ç–∞–ª–æ—Å—å –æ–ø–∏—Å–∞—Ç—å, —á—Ç–æ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å —Å –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ —Å–∞–π—Ç–∞</i>", parse_mode="HTML")
    await state.set_state(ADMINS.desc)
@dp.message(ADMINS.desc)
async def note_link(message: Message, state: FSMContext):
    await state.update_data(desc=message.text)
    note_data = await state.get_data()
    admin_nick = message.from_user.username
    link = note_data['link']
    desc = note_data['desc']
    text = note_data['text']
    await state.clear()
    con = sqlite3.connect('data/db/notepad/notepad.db')
    cur = con.cursor()
    cur.execute(f'INSERT INTO note (admin_nick, link, desc, text) VALUES ("{admin_nick}", "{link}", "{desc}", "{text}")')
    con.commit()
    cur.close()
    con.close()
    con = sqlite3.connect('data/db/notepad/notepad.db')
    cur = con.cursor()
    all = cur.execute("SELECT id FROM note ORDER BY id DESC LIMIT 1")
    all = int((cur.fetchone())[0])
    board = InlineKeyboardBuilder()
    for i in range (1, all+1):
        try:
            text = cur.execute("SELECT text FROM note WHERE id = ?", (i,)).fetchone()
            text = text[0]
            board.add(types.InlineKeyboardButton(text=f"{text}", callback_data=f"notepad_{i}"))
        except:
            pass
    con.close()
    board.add(types.InlineKeyboardButton(text="‚ûï–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å‚ûï", callback_data="note_plus"))
    board.add(types.InlineKeyboardButton(text="‚ûñ–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å‚ûñ", callback_data="note_minus"))
    board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–û—Ç–º–µ–Ω–∞‚Ü©Ô∏è", callback_data="ok"))
    board.adjust(1)
    await message.answer("<i><b>Firestorm</b> –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –≤—Å–µ–≥–¥–∞.\n–ü–æ—ç—Ç–æ–º—É –Ω–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ—Ç–æ–º–∫–æ–≤.\n–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω</i>", parse_mode="HTML", reply_markup=board.as_markup())

@dp.message(ADMINS.minus)                     
async def note_minus(message: Message, state: FSMContext):
    await state.update_data(note_minus=message.html_text)
    note_data = await state.get_data()
    number = note_data['note_minus']
    await state.clear()
    con = sqlite3.connect('data/db/notepad/notepad.db')
    cur = con.cursor()
    cur.execute("DELETE FROM note WHERE id = ?", (number,))    
    con.commit()
    con.close()
    con = sqlite3.connect('data/db/notepad/notepad.db')
    cur = con.cursor()
    all = cur.execute("SELECT id FROM note ORDER BY id DESC LIMIT 1")
    all = int((cur.fetchone())[0])
    board = InlineKeyboardBuilder()
    for i in range (1, all+1):
        try:
            text = cur.execute("SELECT text FROM note WHERE id = ?", (i,)).fetchone()
            text = text[0]
            board.add(types.InlineKeyboardButton(text=f"{text}", callback_data=f"notepad_{i}"))
        except:
            pass
    con.close()
    board.add(types.InlineKeyboardButton(text="‚ûï–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å‚ûï", callback_data="note_plus"))
    board.add(types.InlineKeyboardButton(text="‚ûñ–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å‚ûñ", callback_data="note_minus"))
    board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–û—Ç–º–µ–Ω–∞‚Ü©Ô∏è", callback_data="ok"))
    board.adjust(1)
    await message.answer("<i><b>Firestorm</b> –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –≤—Å–µ–≥–¥–∞.\n–ü–æ—ç—Ç–æ–º—É –Ω–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ—Ç–æ–º–∫–æ–≤.\n–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω</i>", parse_mode="HTML", reply_markup=board.as_markup())

# SOS –∞–¥–º–∏–Ω—É
@dp.message(ADMINS.help)
async def admin_plus(message: Message, state: FSMContext):
    await state.update_data(help=message.html_text)
    nick = message.from_user.username
    user_data = await state.get_data()
    with open("data/variables/text/SOS.txt", "w", encoding="utf-8") as file:
        file.write(f"<b>–ê–¥–º–∏–Ω:</b> @{nick}\n")
        file.write(f"<b>–ü—Ä–æ–±–ª–µ–º–∞:</b> {user_data['help']}\n")
    with open("data/variables/text/SOS.txt", "r", encoding="utf-8") as file:
        text_sos = file.read()
        try:
            await bot.send_message(chat_id=master_id, text=text_sos, parse_mode="HTML")
            board = InlineKeyboardBuilder()
            board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
            await message.answer("<i>üòÇ–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ, –æ–∂–∏–¥–∞–π—Ç–µüòÇ</i>", parse_mode="HTML", reply_markup=board.as_markup())
        except:
            board = InlineKeyboardBuilder()
            board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
            await message.answer("<i>üòÇ–ß–æ—Ç —Ö–æ–∑—è–∏–Ω –ø–æ—Ç–µ—Ä—è–ª—Å—è\n–¢–∞–∫ —á—Ç–æ –µ—Å–ª–∏ –∫–∞–∫–∏–µ-—Ç–æ –ø—Ä–æ–±–ª–µ–º—ã - —Ä–µ—à–∞–πüòÇ</i>", parse_mode="HTML", reply_markup=board.as_markup())

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –≤ –ë–î
@dp.message(ADMINS.idtg)
async def admin_plus(message: Message, state: FSMContext):
    await state.update_data(idtg=message.text)
    board = InlineKeyboardBuilder()
    board.add(types.InlineKeyboardButton(text="admin", callback_data="role_admin"))
    board.add(types.InlineKeyboardButton(text="master", callback_data="role_master"))
    await message.answer("<i>–í—ã–±–µ—Ä–∏ —Ä–æ–ª—å</i>", parse_mode="HTML", reply_markup=board.as_markup())

# –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
def get_sorted_items(path: str):
    items = os.listdir(path)
    items_with_time = [(item, os.path.getctime(os.path.join(path, item))) for item in items]
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
    items_with_time.sort(key=lambda x: x[1], reverse=True)
    return [item[0] for item in items_with_time]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
async def list_directory(message: types.Message, path: str):
    items = get_sorted_items(HISTORY_DIR)
    board = InlineKeyboardBuilder()
    files = items
    for file in files:
        button_text = file.split(" ", 1)[1]
        button_text = button_text.split(".", 1)[0]
        print (button_text)
        board.add(types.InlineKeyboardButton(text=button_text, callback_data=f"winners:{file}"))
    board.adjust(3)
    board.add(types.InlineKeyboardButton(text="‚Ü™Ô∏è–í –Ω–∞—á–∞–ª–æ‚Ü©Ô∏è", callback_data="ok"))
    await message.edit_text("<i>–ö–æ–≥–¥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏–ª—Å—è —Ä–æ–∑—ã–≥—Ä—ã—à?\n–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è</i>", parse_mode="HTML", reply_markup=board.as_markup())

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω/—é–∑–µ—Ä
def is_user_admin(user_id: int):
    con = sqlite3.connect('data/db/role/admin.db')
    cur = con.cursor()
    cur.execute("SELECT * FROM admins WHERE idtg = ?", (user_id,))
    user = cur.fetchone()
    con.close()
    return user is not None

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –≤ –ë–î
def role_in_db(user_id: str):
    con = sqlite3.connect('data/db/role/admin.db')
    cur = con.cursor()
    cur.execute('SELECT role FROM admins WHERE idtg = ?', [user_id])
    result = cur.fetchone()
    cur.close()
    con.close()
    return result[0] if result else None

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())